theory corekt_deniability_sauth begin

// Function signature and definition of the equational theory E

functions: H/1, HKDFExpand/3, HKDFExtract/2, HMAC/2, KEM_c_Decaps/2,
           KEM_c_Encaps_ct/2, KEM_c_Encaps_ss/2, KEM_c_PK/1, KEM_e_Decaps/2,
           KEM_e_Encaps_ct/2, KEM_e_Encaps_ss/2, KEM_e_PK/1, KEM_s_Decaps/2,
           KEM_s_Encaps_ct/2, KEM_s_Encaps_ss/2, KEM_s_PK/1, fst/1, pair/2, snd/1
equations:
    KEM_c_Decaps(KEM_c_Encaps_ct(KEM_c_PK(sk), coins), sk)
  = KEM_c_Encaps_ss(KEM_c_PK(sk), coins),
    KEM_e_Decaps(KEM_e_Encaps_ct(KEM_e_PK(sk), coins), sk)
  = KEM_e_Encaps_ss(KEM_e_PK(sk), coins),
    KEM_s_Decaps(KEM_s_Encaps_ct(KEM_s_PK(sk), coins), sk)
  = KEM_s_Encaps_ss(KEM_s_PK(sk), coins),
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) KEMTLS_KEM_s_KeyGen:
   [ Fr( ~sk_P ) ]
  --[ RegisteredLTK( $P, KEM_s_PK(~sk_P), 'KEM_s' ) ]->
   [
   !Ltk( $P, KEM_s_PK(~sk_P), ~sk_P, 'KEM_s' ),
   !Pk( $P, KEM_s_PK(~sk_P), 'KEM_s' ), Out( KEM_s_PK(~sk_P) )
   ]

rule (modulo E) KEMTLS_KEM_c_KeyGen:
   [ Fr( ~sk_P ) ]
  --[ RegisteredLTK( $P, KEM_c_PK(~sk_P), 'KEM_c' ) ]->
   [
   !Ltk( $P, KEM_c_PK(~sk_P), ~sk_P, 'KEM_c' ),
   !Pk( $P, KEM_c_PK(~sk_P), 'KEM_c' ), Out( KEM_c_PK(~sk_P) )
   ]

rule (modulo E) KEMTLS_SAUTH_real:
   [
   !Ltk( $S, pk_S, sk_S, 'KEM_s' ), Fr( ~sk_e ), Fr( ~r_c ), Fr( ~r_s ),
   Fr( ~coins_e ), Fr( ~coins_S )
   ]
  -->
   [
   RealTranscript( <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                    <'ServerHello', KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>, 
                    <'ServerCertificate', pk_S>, 'ClientKEMCiphertext', 
                    KEM_s_Encaps_ct(pk_S, ~coins_S)>,
                   <
                    HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'), 'derived', '0'),
                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                               'c_hs_traffic',
                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>), 
                    HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'), 'derived', '0'),
                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                               's_hs_traffic',
                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>), 
                    HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                  'derived', '0'),
                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                           'derived', '0'),
                                KEM_s_Decaps(KEM_s_Encaps_ct(pk_S, ~coins_S), sk_S))
                   >,
                   pk_S
   )
   ]

rule (modulo E) KEMTLS_SAUTH_simulated:
   [
   !Pk( $S, pk_S, 'KEM_s' ), Fr( ~sk_e ), Fr( ~r_c ), Fr( ~r_s ),
   Fr( ~coins_e ), Fr( ~coins_S )
   ]
  -->
   [
   FakeTranscript( <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                    <'ServerHello', KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>, 
                    <'ServerCertificate', pk_S>, 'ClientKEMCiphertext', 
                    KEM_s_Encaps_ct(pk_S, ~coins_S)>,
                   <
                    HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'), 'derived', '0'),
                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                               'c_hs_traffic',
                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>), 
                    HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'), 'derived', '0'),
                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                               's_hs_traffic',
                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>), 
                    HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                  'derived', '0'),
                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                           'derived', '0'),
                                KEM_s_Encaps_ss(pk_S, ~coins_S))
                   >,
                   pk_S
   )
   ]

rule (modulo E) real_vs_simulated:
   [
   RealTranscript( transcript_real, session_keys_real, public_keys ),
   FakeTranscript( transcript_simulated, session_keys_simulated, public_keys
   )
   ]
  -->
   [
   Out( diff(<transcript_real, session_keys_real>, <transcript_simulated, 
                                                    session_keys_simulated>)
   )
   ]

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_KEM_c_Decaps
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( KEM_c_Encaps_ct(KEM_c_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_s_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( KEM_c_Encaps_ct(KEM_c_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_s_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_KEM_e_Decaps
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( KEM_e_Encaps_ct(KEM_e_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case KEM_e_Encaps_ct
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk ) )
                    qed
                  next
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_s_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( KEM_e_Encaps_ct(KEM_e_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case KEM_e_Encaps_ct
                      by step( solve( !KU( ~sk_e ) @ #vk ) )
                    next
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_s_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_KEM_s_Decaps
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( KEM_s_Encaps_ct(KEM_s_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case KEM_s_Encaps_ct
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      by step( solve( !KU( ~sk_P ) @ #vk ) )
                    qed
                  next
                    case d_0_KEM_s_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( KEM_s_Encaps_ct(KEM_s_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case KEM_s_Encaps_ct
                      by step( solve( !KU( ~sk_P ) @ #vk ) )
                    next
                      case d_0_KEM_s_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_s_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, KEM_s_PK(~sk_P)
                         ) ▶₁ #vr ) )
              case KEMTLS_SAUTH_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, KEM_s_PK(~sk_P)
                         ) ▶₁ #vr ) )
              case KEMTLS_SAUTH_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_s_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_s_Decaps
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, KEM_s_PK(~sk_P)
                         ) ▶₁ #vr ) )
              case KEMTLS_SAUTH_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, KEM_s_PK(~sk_P)
                         ) ▶₁ #vr ) )
              case KEMTLS_SAUTH_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_s_Decaps
                      by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_c_PK
        step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_c_KeyGen
          MIRRORED
        next
          case c_KEM_c_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        qed
      qed
    next
      case KEMTLS_KEM_s_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_s_PK
        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_s_KeyGen
          MIRRORED
        next
          case c_KEM_s_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        next
          case real_vs_simulated
          MIRRORED
        qed
      qed
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case Const_pub_ClientHello
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case KEM_e_PK
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case Var_fresh_r_c
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    step( solve( !KU( ~r_c ) @ #vk ) )
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  step( solve( !KU( ~r_c ) @ #vk.2 ) )
                    case real_vs_simulated
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.2 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.3 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                step( solve( !KU( ~r_c ) @ #vk.4 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.3 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.10 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.10 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.4 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.5 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case Const_pub_ServerHello
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case KEM_e_Encaps_ct
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e) ) @ #vk ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.2 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_KEM_e_Decaps
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case KEM_e_Encaps_ss
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated, KEM_s_PK(~sk_P)
                                   ) ▶₁ #vr ) )
                        case KEMTLS_SAUTH_simulated
                        by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Var_fresh_r_s
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      step( solve( !KU( ~r_s ) @ #vk ) )
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    step( solve( !KU( ~r_s ) @ #vk.2 ) )
                      case real_vs_simulated
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.2 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.4 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  step( solve( !KU( ~r_s ) @ #vk.4 ) )
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.3 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.3 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.12 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.12 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.4 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.6 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_ServerCertificate
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      step( solve( !KU( 'ServerCertificate' ) @ #vk ) )
                        case coerce
                        step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case KEM_s_PK
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
                        case KEMTLS_KEM_s_KeyGen
                        MIRRORED
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    step( solve( !KU( 'ServerCertificate' ) @ #vk.1 ) )
                      case coerce
                      step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.1 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.2 ) )
                        case KEMTLS_KEM_s_KeyGen
                        MIRRORED
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.3 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_ClientKEMCiphertext
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case KEM_s_Encaps_ct
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, KEM_s_PK(~sk_P)
                                 ) ▶₁ #vr ) )
                      case KEMTLS_SAUTH_simulated
                      step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S) ) @ #vk ) )
                        case c_KEM_s_Encaps_ct
                        by step( solve( !KU( ~coins_S ) @ #vk.2 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_KEM_s_Decaps
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case KEM_s_Encaps_ss
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated, KEM_s_PK(~sk_P)
                                   ) ▶₁ #vr ) )
                        case KEMTLS_SAUTH_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, KEM_s_PK(~sk_P)
                               ) ▶₁ #vr ) )
                    case KEMTLS_SAUTH_simulated
                    step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.1 ) )
                      case coerce
                      step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.1 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.2 ) )
                        case c_KEM_s_Encaps_ct
                        by step( solve( !KU( ~coins_S ) @ #vk.4 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  step( solve( !KU( 'ServerCertificate' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.3 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.4 ) )
                      case KEMTLS_KEM_s_KeyGen
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.5 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.7 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.7 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                     ) @ #vk.6 ) )
                          case c_KEM_s_Encaps_ct
                          by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case c_KEM_s_PK
                      by step( solve( !KU( ~sk_P ) @ #vk.7 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.5 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.15 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.15 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                     ) @ #vk.6 ) )
                          case c_KEM_s_Encaps_ct
                          by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                step( solve( !KU( ~r_s ) @ #vk.8 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ServerHello' ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( 'ServerHello' ) ▶₀ #vk.7 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.8 ) )
                      case c_KEM_e_Encaps_ct
                      by step( solve( !KU( ~coins_e ) @ #vk.14 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ServerCertificate' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.9 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.16 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.16 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.10 ) )
                          case KEMTLS_KEM_s_KeyGen
                          step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.16 ) )
                                  case KEMTLS_SAUTH_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.16 ) )
                                  case KEMTLS_SAUTH_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                         ) @ #vk.12 ) )
                              case c_KEM_s_Encaps_ct
                              by step( solve( !KU( ~coins_S ) @ #vk.13 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        next
                          case c_KEM_s_PK
                          by step( solve( !KU( ~sk_P ) @ #vk.13 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_SAUTH_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_SAUTH_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                         ) @ #vk.12 ) )
                              case c_KEM_s_Encaps_ct
                              by step( solve( !KU( ~coins_S ) @ #vk.13 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, KEM_s_PK(~sk_P)
                         ) ▶₁ #vr ) )
              case KEMTLS_SAUTH_simulated
              step( solve( !KU( ~r_c ) @ #vk.11 ) )
                case real_vs_simulated
                step( solve( !KU( ~r_s ) @ #vk.14 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.11 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.11 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.11, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.14 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.14 ) )
                          case KEMTLS_SAUTH_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.12 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.19 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ServerHello' ) @ #vk.13 ) )
                        case coerce
                        step( solve( !KD( 'ServerHello' ) ▶₀ #vk.13 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.13, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.18 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.18 ) )
                              case KEMTLS_SAUTH_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                     ) @ #vk.14 ) )
                          case c_KEM_e_Encaps_ct
                          by step( solve( !KU( ~coins_e ) @ #vk.19 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'ServerCertificate' ) @ #vk.15 ) )
                            case coerce
                            step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.15 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.15, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_SAUTH_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_SAUTH_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.16 ) )
                              case KEMTLS_KEM_s_KeyGen
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_SAUTH_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_SAUTH_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.18 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.19 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            next
                              case c_KEM_s_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.19 ) )
                            next
                              case real_vs_simulated
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.31 ) )
                                      case KEMTLS_SAUTH_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.31 ) )
                                      case KEMTLS_SAUTH_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.18 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.19 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
              case HKDFExpand
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                '0'),
                                                                    'derived', '0'),
                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                             'c_hs_traffic',
                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                             ) @ #vk ) )
                  case c_HKDFExpand
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                           'derived', '0'),
                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                               ) @ #vk.6 ) )
                    case c_HKDFExtract
                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.15 ) )
                      case c_KEM_e_Encaps_ss
                      by step( solve( !KU( ~coins_e ) @ #vk.16 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk.16 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  MIRRORED
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.4, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case HKDFExpand
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                  '0'),
                                                                      'derived', '0'),
                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                               's_hs_traffic',
                                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                               ) @ #vk ) )
                    case c_HKDFExpand
                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                             'derived', '0'),
                                                  KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                 ) @ #vk.6 ) )
                      case c_HKDFExtract
                      step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.15 ) )
                        case c_KEM_e_Encaps_ss
                        by step( solve( !KU( ~coins_e ) @ #vk.16 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_e ) @ #vk.16 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case HKDFExtract
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, KEM_s_PK(~sk_P)
                             ) ▶₁ #vr ) )
                  case KEMTLS_SAUTH_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.1 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.2 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, KEM_s_PK(~sk_P)
                           ) ▶₁ #vr ) )
                case KEMTLS_SAUTH_simulated
                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                '0'),
                                                                    'derived', '0'),
                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                             's_hs_traffic',
                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                             ) @ #vk.1 ) )
                  case c_HKDFExpand
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                           'derived', '0'),
                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                               ) @ #vk.8 ) )
                    case c_HKDFExtract
                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.17 ) )
                      case c_KEM_e_Encaps_ss
                      by step( solve( !KU( ~coins_e ) @ #vk.18 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk.18 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk.2 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.3 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.4 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.9 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.8 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, KEM_s_PK(~sk_P)
                         ) ▶₁ #vr ) )
              case KEMTLS_SAUTH_simulated
              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                              '0'),
                                                                  'derived', '0'),
                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                           'c_hs_traffic',
                                           <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                            KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                           ) @ #vk.2 ) )
                case c_HKDFExpand
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                         'derived', '0'),
                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                             ) @ #vk.10 ) )
                  case c_HKDFExtract
                  step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                               ) @ #vk.19 ) )
                    case c_KEM_e_Encaps_ss
                    by step( solve( !KU( ~coins_e ) @ #vk.20 ) )
                  next
                    case real_vs_simulated
                    by step( solve( !KU( ~sk_e ) @ #vk.20 ) )
                  qed
                qed
              next
                case real_vs_simulated
                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                '0'),
                                                                    'derived', '0'),
                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                             's_hs_traffic',
                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                             ) @ #vk.3 ) )
                  case c_HKDFExpand
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                           'derived', '0'),
                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                               ) @ #vk.10 ) )
                    case c_HKDFExtract
                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.19 ) )
                      case c_KEM_e_Encaps_ss
                      by step( solve( !KU( ~coins_e ) @ #vk.20 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk.20 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk.4 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.5 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.6 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.11 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.10 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( !KU( ~r_c ) @ #vk.14 ) )
              case real_vs_simulated
              step( solve( !KU( ~r_s ) @ #vk.17 ) )
                case real_vs_simulated
                step( solve( !KU( 'ClientHello' ) @ #vk.14 ) )
                  case coerce
                  step( solve( !KD( 'ClientHello' ) ▶₀ #vk.14 ) )
                    case KEMTLS_KEM_c_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case KEMTLS_KEM_s_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case real_vs_simulated
                    step( solve( (#vl.1, 0) ~~> (#vk.14, 0) ) )
                      case d_0_fst
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.13 ) )
                        case KEMTLS_SAUTH_real
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.13 ) )
                        case KEMTLS_SAUTH_real
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case pub
                  step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.15 ) )
                    case c_KEM_e_PK
                    by step( solve( !KU( ~sk_e ) @ #vk.25 ) )
                  next
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.16 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.16 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.16, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.17 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.17 ) )
                            case KEMTLS_SAUTH_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.17 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.25 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'ServerCertificate' ) @ #vk.18 ) )
                          case coerce
                          step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.18 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.18, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.22 ) )
                                case KEMTLS_SAUTH_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.22 ) )
                                case KEMTLS_SAUTH_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.19 ) )
                            case KEMTLS_KEM_s_KeyGen
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.20 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.20 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.20, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.22 ) )
                                    case KEMTLS_SAUTH_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.22 ) )
                                    case KEMTLS_SAUTH_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.21 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.25 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                '0'),
                                                                                    'derived', '0'),
                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                         ~coins_e)),
                                                             'c_hs_traffic',
                                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                              'ServerHello', 
                                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s
                                                             >)
                                             ) @ #vk.22 ) )
                                  case c_HKDFExpand
                                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                           'derived', '0'),
                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                               ) @ #vk.26 ) )
                                    case c_HKDFExtract
                                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                 ) @ #vk.29 ) )
                                      case c_KEM_e_Encaps_ss
                                      by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                    next
                                      case real_vs_simulated
                                      by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                    qed
                                  qed
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                  '0'),
                                                                                      'derived', '0'),
                                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                           ~coins_e)),
                                                               's_hs_traffic',
                                                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                                'ServerHello', 
                                                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), 
                                                                ~r_s>)
                                               ) @ #vk.23 ) )
                                    case c_HKDFExpand
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                             'derived', '0'),
                                                                  KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                                 ) @ #vk.26 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                   ) @ #vk.29 ) )
                                        case c_KEM_e_Encaps_ss
                                        by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                      next
                                        case real_vs_simulated
                                        by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                      qed
                                    qed
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                '0'),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                         ~coins_e)),
                                                                             'derived', '0'),
                                                                  KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                                                 ) @ #vk.24 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                      '0'),
                                                                                          'derived', '0'),
                                                                               KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                               ~coins_e)),
                                                                   'derived', '0')
                                                   ) @ #vk.25 ) )
                                        case c_HKDFExpand
                                        step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                     ) @ #vk.26 ) )
                                          case c_KEM_s_Encaps_ss
                                          by step( solve( !KU( ~coins_S ) @ #vk.30 ) )
                                        next
                                          case real_vs_simulated
                                          by step( solve( !KU( ~sk_P ) @ #vk.30 ) )
                                        qed
                                      qed
                                    next
                                      case real_vs_simulated
                                      MIRRORED
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_KEM_s_PK
                            by step( solve( !KU( ~sk_P ) @ #vk.25 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.20 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.20 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.20, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.30 ) )
                                    case KEMTLS_SAUTH_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.30 ) )
                                    case KEMTLS_SAUTH_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.21 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.25 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                '0'),
                                                                                    'derived', '0'),
                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                         ~coins_e)),
                                                             'c_hs_traffic',
                                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                              'ServerHello', 
                                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s
                                                             >)
                                             ) @ #vk.22 ) )
                                  case c_HKDFExpand
                                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                           'derived', '0'),
                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                               ) @ #vk.26 ) )
                                    case c_HKDFExtract
                                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                 ) @ #vk.29 ) )
                                      case c_KEM_e_Encaps_ss
                                      by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                    next
                                      case real_vs_simulated
                                      by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                    qed
                                  qed
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                  '0'),
                                                                                      'derived', '0'),
                                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                           ~coins_e)),
                                                               's_hs_traffic',
                                                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                                'ServerHello', 
                                                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), 
                                                                ~r_s>)
                                               ) @ #vk.23 ) )
                                    case c_HKDFExpand
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                             'derived', '0'),
                                                                  KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                                 ) @ #vk.26 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                   ) @ #vk.29 ) )
                                        case c_KEM_e_Encaps_ss
                                        by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                      next
                                        case real_vs_simulated
                                        by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                      qed
                                    qed
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                '0'),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                         ~coins_e)),
                                                                             'derived', '0'),
                                                                  KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                                                 ) @ #vk.24 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                      '0'),
                                                                                          'derived', '0'),
                                                                               KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                               ~coins_e)),
                                                                   'derived', '0')
                                                   ) @ #vk.25 ) )
                                        case c_HKDFExpand
                                        step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                     ) @ #vk.26 ) )
                                          case c_KEM_s_Encaps_ss
                                          by step( solve( !KU( ~coins_S ) @ #vk.30 ) )
                                        next
                                          case real_vs_simulated
                                          by step( solve( !KU( ~sk_P ) @ #vk.30 ) )
                                        qed
                                      qed
                                    next
                                      case real_vs_simulated
                                      MIRRORED
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_c_PK
        step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_c_KeyGen
          MIRRORED
        next
          case c_KEM_c_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        qed
      qed
    next
      case KEMTLS_KEM_s_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_s_PK
        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_s_KeyGen
          MIRRORED
        next
          case c_KEM_s_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        next
          case real_vs_simulated
          MIRRORED
        qed
      qed
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case Const_pub_ClientHello
                  step( solve( !KU( 'ClientHello' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.7 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.7 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case KEM_e_PK
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Var_fresh_r_c
                    step( solve( !KU( ~r_c ) @ #vk ) )
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( ~r_c ) @ #vk.2 ) )
                    case real_vs_simulated
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.2 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.3 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( ~r_c ) @ #vk.4 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.3 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.10 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.10 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.10 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.10 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.4 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.5 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case Const_pub_ServerHello
                    step( solve( !KU( 'ServerHello' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case KEM_e_Encaps_ct
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e) ) @ #vk ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.2 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    next
                      case d_0_KEM_e_Decaps
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case KEM_e_Encaps_ss
                        by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case Var_fresh_r_s
                      step( solve( !KU( ~r_s ) @ #vk ) )
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( ~r_s ) @ #vk.2 ) )
                      case real_vs_simulated
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.2 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.4 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( ~r_s ) @ #vk.4 ) )
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.3 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.3 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.12 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.12 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.12 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.12 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.4 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.6 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case Const_pub_ServerCertificate
                      step( solve( !KU( 'ServerCertificate' ) @ #vk ) )
                        case coerce
                        step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.9 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.9 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case KEM_s_PK
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
                        case KEMTLS_KEM_s_KeyGen
                        MIRRORED
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( 'ServerCertificate' ) @ #vk.1 ) )
                      case coerce
                      step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.1 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.2 ) )
                        case KEMTLS_KEM_s_KeyGen
                        MIRRORED
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.3 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case Const_pub_ClientKEMCiphertext
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.9 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.9 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.9 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                      case KEM_s_Encaps_ct
                      step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S) ) @ #vk ) )
                        case c_KEM_s_Encaps_ct
                        by step( solve( !KU( ~coins_S ) @ #vk.2 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    next
                      case d_0_KEM_s_Decaps
                      step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                        case KEM_s_Encaps_ss
                        by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.1 ) )
                      case coerce
                      step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.1 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.2 ) )
                        case c_KEM_s_Encaps_ct
                        by step( solve( !KU( ~coins_S ) @ #vk.4 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'ServerCertificate' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.3 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.7 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.7 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.7 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.4 ) )
                      case KEMTLS_KEM_s_KeyGen
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.5 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.7 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.7 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.7 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.7 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                     ) @ #vk.6 ) )
                          case c_KEM_s_Encaps_ct
                          by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case c_KEM_s_PK
                      by step( solve( !KU( ~sk_P ) @ #vk.7 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.5 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.15 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.15 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.15 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.15 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                     ) @ #vk.6 ) )
                          case c_KEM_s_Encaps_ct
                          by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( ~r_s ) @ #vk.8 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ServerHello' ) @ #vk.7 ) )
                    case coerce
                    step( solve( !KD( 'ServerHello' ) ▶₀ #vk.7 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.11 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.11 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.8 ) )
                      case c_KEM_e_Encaps_ct
                      by step( solve( !KU( ~coins_e ) @ #vk.14 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ServerCertificate' ) @ #vk.9 ) )
                        case coerce
                        step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.9 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.9, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.16 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.16 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.16 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.16 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.10 ) )
                          case KEMTLS_KEM_s_KeyGen
                          step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.16 ) )
                                  case KEMTLS_SAUTH_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated, KEM_s_PK(~sk_P.1)
                                               ) ▶₁ #vr.16 ) )
                                    case KEMTLS_SAUTH_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.16 ) )
                                  case KEMTLS_SAUTH_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated, KEM_s_PK(~sk_P.1)
                                               ) ▶₁ #vr.16 ) )
                                    case KEMTLS_SAUTH_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                         ) @ #vk.12 ) )
                              case c_KEM_s_Encaps_ct
                              by step( solve( !KU( ~coins_S ) @ #vk.13 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        next
                          case c_KEM_s_PK
                          by step( solve( !KU( ~sk_P ) @ #vk.13 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                            case coerce
                            step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_SAUTH_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated, KEM_s_PK(~sk_P.1)
                                               ) ▶₁ #vr.24 ) )
                                    case KEMTLS_SAUTH_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_SAUTH_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated, KEM_s_PK(~sk_P.1)
                                               ) ▶₁ #vr.24 ) )
                                    case KEMTLS_SAUTH_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                         ) @ #vk.12 ) )
                              case c_KEM_s_Encaps_ct
                              by step( solve( !KU( ~coins_S ) @ #vk.13 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( ~r_c ) @ #vk.11 ) )
                case real_vs_simulated
                step( solve( !KU( ~r_s ) @ #vk.14 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.11 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.11 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.11, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.14 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.14 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.14 ) )
                          case KEMTLS_SAUTH_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated, KEM_s_PK(~sk_P.1)
                                       ) ▶₁ #vr.14 ) )
                            case KEMTLS_SAUTH_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.12 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.19 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ServerHello' ) @ #vk.13 ) )
                        case coerce
                        step( solve( !KD( 'ServerHello' ) ▶₀ #vk.13 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.13, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.18 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.18 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.18 ) )
                              case KEMTLS_SAUTH_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated, KEM_s_PK(~sk_P.1)
                                           ) ▶₁ #vr.18 ) )
                                case KEMTLS_SAUTH_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                     ) @ #vk.14 ) )
                          case c_KEM_e_Encaps_ct
                          by step( solve( !KU( ~coins_e ) @ #vk.19 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'ServerCertificate' ) @ #vk.15 ) )
                            case coerce
                            step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.15 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.15, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_SAUTH_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated, KEM_s_PK(~sk_P.1)
                                               ) ▶₁ #vr.23 ) )
                                    case KEMTLS_SAUTH_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_SAUTH_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated, KEM_s_PK(~sk_P.1)
                                               ) ▶₁ #vr.23 ) )
                                    case KEMTLS_SAUTH_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.16 ) )
                              case KEMTLS_KEM_s_KeyGen
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_SAUTH_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                   ) ▶₁ #vr.23 ) )
                                        case KEMTLS_SAUTH_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_SAUTH_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                   ) ▶₁ #vr.23 ) )
                                        case KEMTLS_SAUTH_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.18 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.19 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            next
                              case c_KEM_s_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.19 ) )
                            next
                              case real_vs_simulated
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.31 ) )
                                      case KEMTLS_SAUTH_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                   ) ▶₁ #vr.31 ) )
                                        case KEMTLS_SAUTH_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.31 ) )
                                      case KEMTLS_SAUTH_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                   ) ▶₁ #vr.31 ) )
                                        case KEMTLS_SAUTH_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.18 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.19 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case HKDFExpand
                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                '0'),
                                                                    'derived', '0'),
                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                             'c_hs_traffic',
                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                             ) @ #vk ) )
                  case c_HKDFExpand
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                           'derived', '0'),
                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                               ) @ #vk.6 ) )
                    case c_HKDFExtract
                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.15 ) )
                      case c_KEM_e_Encaps_ss
                      by step( solve( !KU( ~coins_e ) @ #vk.16 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk.16 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case HKDFExpand
                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                  '0'),
                                                                      'derived', '0'),
                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                               's_hs_traffic',
                                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                               ) @ #vk ) )
                    case c_HKDFExpand
                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                             'derived', '0'),
                                                  KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                 ) @ #vk.6 ) )
                      case c_HKDFExtract
                      step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.15 ) )
                        case c_KEM_e_Encaps_ss
                        by step( solve( !KU( ~coins_e ) @ #vk.16 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_e ) @ #vk.16 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                  case HKDFExtract
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.1 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.2 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                '0'),
                                                                    'derived', '0'),
                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                             's_hs_traffic',
                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                             ) @ #vk.1 ) )
                  case c_HKDFExpand
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                           'derived', '0'),
                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                               ) @ #vk.8 ) )
                    case c_HKDFExtract
                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.17 ) )
                      case c_KEM_e_Encaps_ss
                      by step( solve( !KU( ~coins_e ) @ #vk.18 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk.18 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk.2 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.3 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.4 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.9 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.8 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                              '0'),
                                                                  'derived', '0'),
                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                           'c_hs_traffic',
                                           <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                            KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                           ) @ #vk.2 ) )
                case c_HKDFExpand
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                         'derived', '0'),
                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                             ) @ #vk.10 ) )
                  case c_HKDFExtract
                  step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                               ) @ #vk.19 ) )
                    case c_KEM_e_Encaps_ss
                    by step( solve( !KU( ~coins_e ) @ #vk.20 ) )
                  next
                    case real_vs_simulated
                    by step( solve( !KU( ~sk_e ) @ #vk.20 ) )
                  qed
                qed
              next
                case real_vs_simulated
                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                '0'),
                                                                    'derived', '0'),
                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                             's_hs_traffic',
                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 'ServerHello', 
                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>)
                             ) @ #vk.3 ) )
                  case c_HKDFExpand
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                           'derived', '0'),
                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                               ) @ #vk.10 ) )
                    case c_HKDFExtract
                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.19 ) )
                      case c_KEM_e_Encaps_ss
                      by step( solve( !KU( ~coins_e ) @ #vk.20 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk.20 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk.4 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.5 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.6 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.11 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.10 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_SAUTH_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, KEM_s_PK(~sk_P)
                       ) ▶₁ #vr ) )
            case KEMTLS_SAUTH_simulated
            step( solve( !KU( ~r_c ) @ #vk.14 ) )
              case real_vs_simulated
              step( solve( !KU( ~r_s ) @ #vk.17 ) )
                case real_vs_simulated
                step( solve( !KU( 'ClientHello' ) @ #vk.14 ) )
                  case coerce
                  step( solve( !KD( 'ClientHello' ) ▶₀ #vk.14 ) )
                    case KEMTLS_KEM_c_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case KEMTLS_KEM_s_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case real_vs_simulated
                    step( solve( (#vl.1, 0) ~~> (#vk.14, 0) ) )
                      case d_0_fst
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.13 ) )
                        case KEMTLS_SAUTH_real
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated, KEM_s_PK(~sk_P.1)
                                     ) ▶₁ #vr.13 ) )
                          case KEMTLS_SAUTH_simulated
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.13 ) )
                        case KEMTLS_SAUTH_real
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated, KEM_s_PK(~sk_P.1)
                                     ) ▶₁ #vr.13 ) )
                          case KEMTLS_SAUTH_simulated
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  qed
                next
                  case pub
                  step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.15 ) )
                    case c_KEM_e_PK
                    by step( solve( !KU( ~sk_e ) @ #vk.25 ) )
                  next
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.16 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.16 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.16, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.17 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.17 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.17 ) )
                            case KEMTLS_SAUTH_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated, KEM_s_PK(~sk_P.1)
                                         ) ▶₁ #vr.17 ) )
                              case KEMTLS_SAUTH_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.17 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.25 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'ServerCertificate' ) @ #vk.18 ) )
                          case coerce
                          step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.18 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.18, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.22 ) )
                                case KEMTLS_SAUTH_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated, KEM_s_PK(~sk_P.1)
                                             ) ▶₁ #vr.22 ) )
                                  case KEMTLS_SAUTH_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.22 ) )
                                case KEMTLS_SAUTH_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated, KEM_s_PK(~sk_P.1)
                                             ) ▶₁ #vr.22 ) )
                                  case KEMTLS_SAUTH_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.19 ) )
                            case KEMTLS_KEM_s_KeyGen
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.20 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.20 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.20, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.22 ) )
                                    case KEMTLS_SAUTH_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                 ) ▶₁ #vr.22 ) )
                                      case KEMTLS_SAUTH_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.22 ) )
                                    case KEMTLS_SAUTH_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                 ) ▶₁ #vr.22 ) )
                                      case KEMTLS_SAUTH_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.21 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.25 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                '0'),
                                                                                    'derived', '0'),
                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                         ~coins_e)),
                                                             'c_hs_traffic',
                                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                              'ServerHello', 
                                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s
                                                             >)
                                             ) @ #vk.22 ) )
                                  case c_HKDFExpand
                                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                           'derived', '0'),
                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                               ) @ #vk.26 ) )
                                    case c_HKDFExtract
                                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                 ) @ #vk.29 ) )
                                      case c_KEM_e_Encaps_ss
                                      by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                    next
                                      case real_vs_simulated
                                      by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                    qed
                                  qed
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                  '0'),
                                                                                      'derived', '0'),
                                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                           ~coins_e)),
                                                               's_hs_traffic',
                                                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                                'ServerHello', 
                                                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), 
                                                                ~r_s>)
                                               ) @ #vk.23 ) )
                                    case c_HKDFExpand
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                             'derived', '0'),
                                                                  KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                                 ) @ #vk.26 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                   ) @ #vk.29 ) )
                                        case c_KEM_e_Encaps_ss
                                        by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                      next
                                        case real_vs_simulated
                                        by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                      qed
                                    qed
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                '0'),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                         ~coins_e)),
                                                                             'derived', '0'),
                                                                  KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                                                 ) @ #vk.24 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                      '0'),
                                                                                          'derived', '0'),
                                                                               KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                               ~coins_e)),
                                                                   'derived', '0')
                                                   ) @ #vk.25 ) )
                                        case c_HKDFExpand
                                        step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                     ) @ #vk.26 ) )
                                          case c_KEM_s_Encaps_ss
                                          by step( solve( !KU( ~coins_S ) @ #vk.30 ) )
                                        next
                                          case real_vs_simulated
                                          by step( solve( !KU( ~sk_P ) @ #vk.30 ) )
                                        qed
                                      qed
                                    next
                                      case real_vs_simulated
                                      MIRRORED
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_KEM_s_PK
                            by step( solve( !KU( ~sk_P ) @ #vk.25 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.20 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.20 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.20, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.30 ) )
                                    case KEMTLS_SAUTH_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                 ) ▶₁ #vr.30 ) )
                                      case KEMTLS_SAUTH_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.30 ) )
                                    case KEMTLS_SAUTH_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated, KEM_s_PK(~sk_P.1)
                                                 ) ▶₁ #vr.30 ) )
                                      case KEMTLS_SAUTH_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.21 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.25 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                '0'),
                                                                                    'derived', '0'),
                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                         ~coins_e)),
                                                             'c_hs_traffic',
                                                             <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                              'ServerHello', 
                                                              KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s
                                                             >)
                                             ) @ #vk.22 ) )
                                  case c_HKDFExpand
                                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                           'derived', '0'),
                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                               ) @ #vk.26 ) )
                                    case c_HKDFExtract
                                    step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                 ) @ #vk.29 ) )
                                      case c_KEM_e_Encaps_ss
                                      by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                    next
                                      case real_vs_simulated
                                      by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                    qed
                                  qed
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                  '0'),
                                                                                      'derived', '0'),
                                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                           ~coins_e)),
                                                               's_hs_traffic',
                                                               <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                                                                'ServerHello', 
                                                                KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), 
                                                                ~r_s>)
                                               ) @ #vk.23 ) )
                                    case c_HKDFExpand
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                             'derived', '0'),
                                                                  KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                                                 ) @ #vk.26 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                   ) @ #vk.29 ) )
                                        case c_KEM_e_Encaps_ss
                                        by step( solve( !KU( ~coins_e ) @ #vk.30 ) )
                                      next
                                        case real_vs_simulated
                                        by step( solve( !KU( ~sk_e ) @ #vk.30 ) )
                                      qed
                                    qed
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                '0'),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                         ~coins_e)),
                                                                             'derived', '0'),
                                                                  KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                                                 ) @ #vk.24 ) )
                                      case c_HKDFExtract
                                      step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                      '0'),
                                                                                          'derived', '0'),
                                                                               KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                               ~coins_e)),
                                                                   'derived', '0')
                                                   ) @ #vk.25 ) )
                                        case c_HKDFExpand
                                        step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                     ) @ #vk.26 ) )
                                          case c_KEM_s_Encaps_ss
                                          by step( solve( !KU( ~coins_S ) @ #vk.30 ) )
                                        next
                                          case real_vs_simulated
                                          by step( solve( !KU( ~sk_P ) @ #vk.30 ) )
                                        qed
                                      qed
                                    next
                                      case real_vs_simulated
                                      MIRRORED
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_KEMTLS_KEM_c_KeyGen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_KEMTLS_KEM_s_KeyGen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_KEMTLS_SAUTH_real
  backward-search
    case LHS
    step( simplify )
    step( solve( !Ltk( $S, pk_S, sk_S, 'KEM_s' ) ▶₀ #i ) )
      case KEMTLS_KEM_s_KeyGen
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Ltk( $S, pk_S, sk_S, 'KEM_s' ) ▶₀ #i ) )
      case KEMTLS_KEM_s_KeyGen
      MIRRORED
    qed
  qed
next
  case Rule_KEMTLS_SAUTH_simulated
  backward-search
    case LHS
    step( simplify )
    step( solve( !Pk( $S, pk_S, 'KEM_s' ) ▶₀ #i ) )
      case KEMTLS_KEM_s_KeyGen
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Pk( $S, pk_S, 'KEM_s' ) ▶₀ #i ) )
      case KEMTLS_KEM_s_KeyGen
      MIRRORED
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_real_vs_simulated
  backward-search
    case LHS
    step( simplify )
    step( solve( RealTranscript( transcript_real, session_keys_real,
                                 public_keys
                 ) ▶₀ #i ) )
      case KEMTLS_SAUTH_real
      step( solve( FakeTranscript( transcript_simulated,
                                   session_keys_simulated, KEM_s_PK(~sk_P)
                   ) ▶₁ #i ) )
        case KEMTLS_SAUTH_simulated
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( RealTranscript( transcript_real, session_keys_real,
                                 public_keys
                 ) ▶₀ #i ) )
      case KEMTLS_SAUTH_real
      step( solve( FakeTranscript( transcript_simulated,
                                   session_keys_simulated, KEM_s_PK(~sk_P)
                   ) ▶₁ #i ) )
        case KEMTLS_SAUTH_simulated
        MIRRORED
      qed
    qed
  qed
qed

end