theory corekt_deniability_mutual begin

// Function signature and definition of the equational theory E

functions: H/1, HKDFExpand/3, HKDFExtract/2, HMAC/2, KEM_c_Decaps/2,
           KEM_c_Encaps_ct/2, KEM_c_Encaps_ss/2, KEM_c_PK/1, KEM_e_Decaps/2,
           KEM_e_Encaps_ct/2, KEM_e_Encaps_ss/2, KEM_e_PK/1, KEM_s_Decaps/2,
           KEM_s_Encaps_ct/2, KEM_s_Encaps_ss/2, KEM_s_PK/1, fst/1, pair/2, snd/1
equations:
    KEM_c_Decaps(KEM_c_Encaps_ct(KEM_c_PK(sk), coins), sk)
  = KEM_c_Encaps_ss(KEM_c_PK(sk), coins),
    KEM_e_Decaps(KEM_e_Encaps_ct(KEM_e_PK(sk), coins), sk)
  = KEM_e_Encaps_ss(KEM_e_PK(sk), coins),
    KEM_s_Decaps(KEM_s_Encaps_ct(KEM_s_PK(sk), coins), sk)
  = KEM_s_Encaps_ss(KEM_s_PK(sk), coins),
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) KEMTLS_KEM_s_KeyGen:
   [ Fr( ~sk_P ) ]
  --[ RegisteredLTK( $P, KEM_s_PK(~sk_P), 'KEM_s' ) ]->
   [
   !Ltk( $P, KEM_s_PK(~sk_P), ~sk_P, 'KEM_s' ),
   !Pk( $P, KEM_s_PK(~sk_P), 'KEM_s' ), Out( KEM_s_PK(~sk_P) )
   ]

rule (modulo E) KEMTLS_KEM_c_KeyGen:
   [ Fr( ~sk_P ) ]
  --[ RegisteredLTK( $P, KEM_c_PK(~sk_P), 'KEM_c' ) ]->
   [
   !Ltk( $P, KEM_c_PK(~sk_P), ~sk_P, 'KEM_c' ),
   !Pk( $P, KEM_c_PK(~sk_P), 'KEM_c' ), Out( KEM_c_PK(~sk_P) )
   ]

rule (modulo E) KEMTLS_MUTUAL_real:
   [
   !Ltk( $C, pk_C, sk_C, 'KEM_c' ), !Ltk( $S, pk_S, sk_S, 'KEM_s' ),
   Fr( ~sk_e ), Fr( ~r_c ), Fr( ~r_s ), Fr( ~coins_e ), Fr( ~coins_C ),
   Fr( ~coins_S )
   ]
  -->
   [
   RealTranscript( <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                    <'ServerHello', KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>, 
                    'CertificateRequest', <'ServerCertificate', pk_S>, 
                    <'ClientKEMCiphertext', KEM_s_Encaps_ct(pk_S, ~coins_S)>, 
                    <'ClientCertificate', pk_C>, 'ServerKEMCiphertext', 
                    KEM_c_Encaps_ct(pk_C, ~coins_C)>,
                   <
                    HKDFExtract(HKDFExpand(HKDFExtract('0', '0'), 'derived', '0'),
                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)), 
                    HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                  'derived', '0'),
                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                           'derived', '0'),
                                KEM_s_Decaps(KEM_s_Encaps_ct(pk_S, ~coins_S), sk_S)), 
                    HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                     '0'),
                                                                                         'derived', '0'),
                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                              ~coins_e)),
                                                                  'derived', '0'),
                                                       KEM_s_Decaps(KEM_s_Encaps_ct(pk_S, ~coins_S), sk_S)),
                                           'derived', '0'),
                                KEM_c_Decaps(KEM_c_Encaps_ct(pk_C, ~coins_C), sk_C))
                   >,
                   <pk_C, pk_S>
   )
   ]

rule (modulo E) KEMTLS_MUTUAL_simulated:
   [
   !Pk( $C, pk_C, 'KEM_c' ), !Pk( $S, pk_S, 'KEM_s' ), Fr( ~sk_e ),
   Fr( ~r_c ), Fr( ~r_s ), Fr( ~coins_e ), Fr( ~coins_C ), Fr( ~coins_S )
   ]
  -->
   [
   FakeTranscript( <<'ClientHello', KEM_e_PK(~sk_e), ~r_c>, 
                    <'ServerHello', KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e), ~r_s>, 
                    'CertificateRequest', <'ServerCertificate', pk_S>, 
                    <'ClientKEMCiphertext', KEM_s_Encaps_ct(pk_S, ~coins_S)>, 
                    <'ClientCertificate', pk_C>, 'ServerKEMCiphertext', 
                    KEM_c_Encaps_ct(pk_C, ~coins_C)>,
                   <
                    HKDFExtract(HKDFExpand(HKDFExtract('0', '0'), 'derived', '0'),
                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)), 
                    HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                  'derived', '0'),
                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                           'derived', '0'),
                                KEM_s_Encaps_ss(pk_S, ~coins_S)), 
                    HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                     '0'),
                                                                                         'derived', '0'),
                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                              ~coins_e)),
                                                                  'derived', '0'),
                                                       KEM_s_Encaps_ss(pk_S, ~coins_S)),
                                           'derived', '0'),
                                KEM_c_Encaps_ss(pk_C, ~coins_C))
                   >,
                   <pk_C, pk_S>
   )
   ]

rule (modulo E) real_vs_simulated:
   [
   RealTranscript( transcript_real, session_keys_real, public_keys ),
   FakeTranscript( transcript_simulated, session_keys_simulated, public_keys
   )
   ]
  -->
   [
   Out( diff(<transcript_real, session_keys_real>, <transcript_simulated, 
                                                    session_keys_simulated>)
   )
   ]

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_KEM_c_Decaps
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( KEM_c_Encaps_ct(KEM_c_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_KEM_s_Decaps
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case KEM_c_Encaps_ct
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                       ) ▶₁ #vr ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( solve( !KU( ~sk_P ) @ #vk ) )
                          qed
                        next
                          case d_0_KEM_c_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( KEM_c_Encaps_ct(KEM_c_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_s_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                            case KEM_c_Encaps_ct
                            by step( solve( !KU( ~sk_P ) @ #vk ) )
                          next
                            case d_0_KEM_c_Decaps
                            by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_KEM_e_Decaps
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( KEM_e_Encaps_ct(KEM_e_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case KEM_e_Encaps_ct
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      by step( solve( !KU( ~sk_e ) @ #vk ) )
                    qed
                  next
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_KEM_s_Decaps
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_c_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( KEM_e_Encaps_ct(KEM_e_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case KEM_e_Encaps_ct
                      by step( solve( !KU( ~sk_e ) @ #vk ) )
                    next
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_s_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                            case d_0_KEM_c_Decaps
                            by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_KEM_s_Decaps
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( KEM_s_Encaps_ct(KEM_s_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case KEM_s_Encaps_ct
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          by step( solve( !KU( ~sk_P ) @ #vk ) )
                        qed
                      next
                        case d_0_KEM_s_Decaps
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_c_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( KEM_s_Encaps_ct(KEM_s_PK(sk), coins) ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case KEM_s_Encaps_ct
                          by step( solve( !KU( ~sk_P ) @ #vk ) )
                        next
                          case d_0_KEM_s_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                            case d_0_KEM_c_Decaps
                            by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_KEM_s_Decaps
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    next
                      case pair
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case pair
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_c_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case pair
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case pair
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case pair
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                         ) ▶₁ #vr ) )
              case KEMTLS_MUTUAL_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                         ) ▶₁ #vr ) )
              case KEMTLS_MUTUAL_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_s_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                            case d_0_KEM_c_Decaps
                            by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                MIRRORED
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_KEM_e_Decaps
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  qed
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_KEM_s_Decaps
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      qed
                    next
                      case pair
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case pair
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_c_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case pair
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case pair
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case pair
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  MIRRORED
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                         ) ▶₁ #vr ) )
              case KEMTLS_MUTUAL_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
            case d_0_fst
            by step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                MIRRORED
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                         ) ▶₁ #vr ) )
              case KEMTLS_MUTUAL_simulated
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case KEMTLS_KEM_s_KeyGen
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_KEM_e_Decaps
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    qed
                  next
                    case d_0_snd
                    by step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
                  case d_0_fst
                  by step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 0) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case d_0_snd
                      by step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 0) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        by step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_KEM_s_Decaps
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 0) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 0) ) )
                          case d_0_fst
                          by step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 0) ) )
                            case d_0_KEM_c_Decaps
                            by step( solve( (#vr.13, 0) ~~> (#i, 0) ) )
                          qed
                        next
                          case pair
                          MIRRORED
                        qed
                      next
                        case pair
                        MIRRORED
                      qed
                    next
                      case pair
                      MIRRORED
                    qed
                  next
                    case pair
                    MIRRORED
                  qed
                next
                  case pair
                  MIRRORED
                qed
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
              case d_0_fst
              by step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 0) ) )
                case d_0_fst
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case d_0_snd
                by step( solve( (#vr.7, 0) ~~> (#i, 0) ) )
              next
                case pair
                MIRRORED
              qed
            next
              case pair
              MIRRORED
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            MIRRORED
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_c_PK
        step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_c_KeyGen
          MIRRORED
        next
          case c_KEM_c_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        next
          case real_vs_simulated
          MIRRORED
        qed
      qed
    next
      case KEMTLS_KEM_s_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_s_PK
        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_s_KeyGen
          MIRRORED
        next
          case c_KEM_s_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        next
          case real_vs_simulated
          MIRRORED
        qed
      qed
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case Const_pub_ClientHello
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case KEM_e_PK
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case Var_fresh_r_c
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    step( solve( !KU( ~r_c ) @ #vk ) )
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  step( solve( !KU( ~r_c ) @ #vk.2 ) )
                    case real_vs_simulated
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.2 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.3 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                step( solve( !KU( ~r_c ) @ #vk.4 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.3 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.4 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.5 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case Const_pub_ServerHello
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case KEM_e_Encaps_ct
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e) ) @ #vk ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.2 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case d_0_KEM_e_Decaps
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case KEM_e_Encaps_ss
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case Var_fresh_r_s
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      step( solve( !KU( ~r_s ) @ #vk ) )
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    step( solve( !KU( ~r_s ) @ #vk.2 ) )
                      case real_vs_simulated
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.2 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.4 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  step( solve( !KU( ~r_s ) @ #vk.4 ) )
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.3 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.3 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.13 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.13 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.4 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.6 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case Const_pub_CertificateRequest
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    step( solve( !KU( 'CertificateRequest' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case Const_pub_ServerCertificate
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        step( solve( !KU( 'ServerCertificate' ) @ #vk ) )
                          case coerce
                          step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case KEM_s_PK
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
                          case KEMTLS_KEM_s_KeyGen
                          MIRRORED
                        next
                          case c_KEM_s_PK
                          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case pair
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      step( solve( !KU( 'ServerCertificate' ) @ #vk.1 ) )
                        case coerce
                        step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.1 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.2 ) )
                          case KEMTLS_KEM_s_KeyGen
                          MIRRORED
                        next
                          case c_KEM_s_PK
                          by step( solve( !KU( ~sk_P ) @ #vk.3 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case Const_pub_ClientKEMCiphertext
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk ) )
                            case coerce
                            step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case KEM_s_Encaps_ct
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S) ) @ #vk ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.2 ) )
                          next
                            case real_vs_simulated
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_KEM_s_Decaps
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case KEM_s_Encaps_ss
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                       ) ▶₁ #vr ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                          qed
                        qed
                      qed
                    next
                      case pair
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.1 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.1 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.2 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.4 ) )
                          next
                            case real_vs_simulated
                            MIRRORED
                          qed
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case Const_pub_ClientCertificate
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                       ) ▶₁ #vr ) )
                            case KEMTLS_MUTUAL_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case KEM_c_PK
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                       ) ▶₁ #vr ) )
                            case KEMTLS_MUTUAL_simulated
                            step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk ) )
                              case KEMTLS_KEM_c_KeyGen
                              MIRRORED
                            next
                              case c_KEM_c_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      next
                        case pair
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          step( solve( !KU( 'ClientCertificate' ) @ #vk.1 ) )
                            case coerce
                            step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.1 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk.2 ) )
                              case KEMTLS_KEM_c_KeyGen
                              MIRRORED
                            next
                              case c_KEM_c_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.3 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case Const_pub_ServerKEMCiphertext
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                       ) ▶₁ #vr ) )
                            case KEMTLS_MUTUAL_simulated
                            step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk ) )
                              case coerce
                              step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case KEM_c_Encaps_ct
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                       ) ▶₁ #vr ) )
                            case KEMTLS_MUTUAL_simulated
                            step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C) ) @ #vk ) )
                              case c_KEM_c_Encaps_ct
                              by step( solve( !KU( ~coins_C ) @ #vk.2 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        next
                          case d_0_KEM_c_Decaps
                          step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                            case KEM_c_Encaps_ss
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                         ) ▶₁ #vr ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                            qed
                          qed
                        qed
                      next
                        case pair
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                     ) ▶₁ #vr ) )
                          case KEMTLS_MUTUAL_simulated
                          step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.1 ) )
                            case coerce
                            step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.1 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C)
                                         ) @ #vk.2 ) )
                              case c_KEM_c_Encaps_ct
                              by step( solve( !KU( ~coins_C ) @ #vk.4 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      qed
                    next
                      case pair
                      step( solve( FakeTranscript( transcript_simulated,
                                                   session_keys_simulated,
                                                   <KEM_c_PK(~sk_P), KEM_s_PK(~sk_P.1)>
                                   ) ▶₁ #vr ) )
                        case KEMTLS_MUTUAL_simulated
                        step( solve( !KU( 'ClientCertificate' ) @ #vk.3 ) )
                          case coerce
                          step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.3 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk.4 ) )
                            case KEMTLS_KEM_c_KeyGen
                            step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.5 ) )
                              case coerce
                              step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.5 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.11 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.11 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C)
                                           ) @ #vk.6 ) )
                                case c_KEM_c_Encaps_ct
                                by step( solve( !KU( ~coins_C ) @ #vk.7 ) )
                              next
                                case real_vs_simulated
                                MIRRORED
                              qed
                            qed
                          next
                            case c_KEM_c_PK
                            by step( solve( !KU( ~sk_P ) @ #vk.7 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.5 ) )
                              case coerce
                              step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.5 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.23 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.23 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C)
                                           ) @ #vk.6 ) )
                                case c_KEM_c_Encaps_ct
                                by step( solve( !KU( ~coins_C ) @ #vk.7 ) )
                              next
                                case real_vs_simulated
                                MIRRORED
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case pair
                    step( solve( FakeTranscript( transcript_simulated,
                                                 session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                                 ) ▶₁ #vr ) )
                      case KEMTLS_MUTUAL_simulated
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.5 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                     ) @ #vk.6 ) )
                          case c_KEM_s_Encaps_ct
                          by step( solve( !KU( ~coins_S ) @ #vk.12 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'ClientCertificate' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.7 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.17 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.17 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.8 ) )
                              case KEMTLS_KEM_c_KeyGen
                              step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.9 ) )
                                case coerce
                                step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.9 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.17 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.17 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                             ) @ #vk.10 ) )
                                  case c_KEM_c_Encaps_ct
                                  by step( solve( !KU( ~coins_C ) @ #vk.11 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            next
                              case c_KEM_c_PK
                              by step( solve( !KU( ~sk_P.1 ) @ #vk.11 ) )
                            next
                              case real_vs_simulated
                              step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.9 ) )
                                case coerce
                                step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.9 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.29 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.29 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                             ) @ #vk.10 ) )
                                  case c_KEM_c_Encaps_ct
                                  by step( solve( !KU( ~coins_C ) @ #vk.11 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( FakeTranscript( transcript_simulated,
                                               session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                               ) ▶₁ #vr ) )
                    case KEMTLS_MUTUAL_simulated
                    step( solve( !KU( 'ServerCertificate' ) @ #vk.7 ) )
                      case coerce
                      step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.7 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.8 ) )
                        case KEMTLS_KEM_s_KeyGen
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.9 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.9 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.9 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.9 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.10 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.15 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.11 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.11 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.16 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.16 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.12 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.16 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.16 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.15 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.28 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.28 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.15 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.9 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.9 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.19 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.19 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.10 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.15 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.11 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.11 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.26 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.26 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.12 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.26 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.26 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.15 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.38 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.38 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  step( solve( !KU( 'CertificateRequest' ) @ #vk.8 ) )
                    case coerce
                    step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.8 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( 'ServerCertificate' ) @ #vk.9 ) )
                      case coerce
                      step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.9 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.9, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.10 ) )
                        case KEMTLS_KEM_s_KeyGen
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.8 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.8 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.12 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.17 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.13 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.13 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.13, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.15 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.15 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.14 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.15 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.15 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.17 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.27 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.27 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.17 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.18 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.18 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.12 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.17 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.13 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.13 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.13, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.25 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.25 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.14 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.25 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.25 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.17 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.37 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.37 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                step( solve( !KU( ~r_s ) @ #vk.13 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ServerHello' ) @ #vk.12 ) )
                    case coerce
                    step( solve( !KD( 'ServerHello' ) ▶₀ #vk.12 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.12, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.12 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.12 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.13 ) )
                      case c_KEM_e_Encaps_ct
                      by step( solve( !KU( ~coins_e ) @ #vk.24 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'CertificateRequest' ) @ #vk.14 ) )
                        case coerce
                        step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.14 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.14, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.17 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.17 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( 'ServerCertificate' ) @ #vk.15 ) )
                          case coerce
                          step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.15 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.15, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.17 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.17 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.16 ) )
                            case KEMTLS_KEM_s_KeyGen
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.17 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.17 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.18 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.23 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ClientCertificate' ) @ #vk.19 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.19 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.19, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.20 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.24 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.24 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  next
                                    case c_KEM_c_PK
                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.23 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.36 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.36 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_KEM_s_PK
                            by step( solve( !KU( ~sk_P ) @ #vk.23 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.27 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.27 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.18 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.23 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ClientCertificate' ) @ #vk.19 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.19 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.19, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.20 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.34 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.34 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  next
                                    case c_KEM_c_PK
                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.23 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.46 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.46 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                         ) ▶₁ #vr ) )
              case KEMTLS_MUTUAL_simulated
              step( solve( !KU( ~r_c ) @ #vk.16 ) )
                case real_vs_simulated
                step( solve( !KU( ~r_s ) @ #vk.19 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.16 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.16 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.16, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.15 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.15 ) )
                          case KEMTLS_MUTUAL_real
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.17 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.29 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ServerHello' ) @ #vk.18 ) )
                        case coerce
                        step( solve( !KD( 'ServerHello' ) ▶₀ #vk.18 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.18, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.19 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.19 ) )
                              case KEMTLS_MUTUAL_real
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                     ) @ #vk.19 ) )
                          case c_KEM_e_Encaps_ct
                          by step( solve( !KU( ~coins_e ) @ #vk.29 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'CertificateRequest' ) @ #vk.20 ) )
                            case coerce
                            step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.20 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.20, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( 'ServerCertificate' ) @ #vk.21 ) )
                              case coerce
                              step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.21 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.1, 0) ~~> (#vk.21, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.24 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.24 ) )
                                    case KEMTLS_MUTUAL_real
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.22 ) )
                                case KEMTLS_KEM_s_KeyGen
                                step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.23 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.23 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.23, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                               ) @ #vk.24 ) )
                                    case c_KEM_s_Encaps_ct
                                    by step( solve( !KU( ~coins_S ) @ #vk.29 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ClientCertificate' ) @ #vk.25 ) )
                                      case coerce
                                      step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.25 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.2, 0) ~~> (#vk.25, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.31 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.31 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.26 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.31 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.31 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_KEM_c_PK
                                        by step( solve( !KU( ~sk_P.1 ) @ #vk.29 ) )
                                      next
                                        case real_vs_simulated
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.43 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.43 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_KEM_s_PK
                                by step( solve( !KU( ~sk_P ) @ #vk.29 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.23 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.23 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.23, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                               ) @ #vk.24 ) )
                                    case c_KEM_s_Encaps_ct
                                    by step( solve( !KU( ~coins_S ) @ #vk.29 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ClientCertificate' ) @ #vk.25 ) )
                                      case coerce
                                      step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.25 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.2, 0) ~~> (#vk.25, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.41 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.41 ) )
                                            case KEMTLS_MUTUAL_real
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.26 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.41 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.41 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_KEM_c_PK
                                        by step( solve( !KU( ~sk_P.1 ) @ #vk.29 ) )
                                      next
                                        case real_vs_simulated
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.53 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.53 ) )
                                                case KEMTLS_MUTUAL_real
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
            case d_0_fst
            step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
              case HKDFExtract
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                         'derived', '0'),
                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                             ) @ #vk ) )
                  case c_HKDFExtract
                  step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                               ) @ #vk.2 ) )
                    case c_KEM_e_Encaps_ss
                    by step( solve( !KU( ~coins_e ) @ #vk.4 ) )
                  next
                    case real_vs_simulated
                    by step( solve( !KU( ~sk_e ) @ #vk.3 ) )
                  qed
                next
                  case real_vs_simulated
                  MIRRORED
                qed
              qed
            qed
          next
            case d_0_snd
            step( solve( (#vr.5, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case HKDFExtract
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.1 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.2 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case HKDFExtract
                step( solve( FakeTranscript( transcript_simulated,
                                             session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                             ) ▶₁ #vr ) )
                  case KEMTLS_MUTUAL_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                     '0'),
                                                                                                         'derived',
                                                                                                         '0'),
                                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                              ~coins_e)),
                                                                                  'derived', '0'),
                                                                       KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                       ~coins_S)),
                                                           'derived', '0'),
                                                KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C))
                               ) @ #vk ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                           '0'),
                                                                                               'derived',
                                                                                               '0'),
                                                                                    KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                    ~coins_e)),
                                                                        'derived', '0'),
                                                             KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)),
                                                 'derived', '0')
                                 ) @ #vk.1 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C)
                                   ) @ #vk.2 ) )
                        case c_KEM_c_Encaps_ss
                        by step( solve( !KU( ~coins_C ) @ #vk.7 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P.1 ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            next
              case pair
              step( solve( FakeTranscript( transcript_simulated,
                                           session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                           ) ▶₁ #vr ) )
                case KEMTLS_MUTUAL_simulated
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                            '0'),
                                                                                'derived', '0'),
                                                                     KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                     ~coins_e)),
                                                         'derived', '0'),
                                              KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                             ) @ #vk.1 ) )
                  case c_HKDFExtract
                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                  '0'),
                                                                      'derived', '0'),
                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                               'derived', '0')
                               ) @ #vk.3 ) )
                    case c_HKDFExpand
                    step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                 ) @ #vk.4 ) )
                      case c_KEM_s_Encaps_ss
                      by step( solve( !KU( ~coins_S ) @ #vk.9 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_P ) @ #vk.8 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                     '0'),
                                                                                                         'derived',
                                                                                                         '0'),
                                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                              ~coins_e)),
                                                                                  'derived', '0'),
                                                                       KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                       ~coins_S)),
                                                           'derived', '0'),
                                                KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C))
                               ) @ #vk.2 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                           '0'),
                                                                                               'derived',
                                                                                               '0'),
                                                                                    KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                    ~coins_e)),
                                                                        'derived', '0'),
                                                             KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)),
                                                 'derived', '0')
                                 ) @ #vk.3 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C)
                                   ) @ #vk.4 ) )
                        case c_KEM_c_Encaps_ss
                        by step( solve( !KU( ~coins_C ) @ #vk.8 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P.1 ) @ #vk.7 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            qed
          next
            case pair
            step( solve( FakeTranscript( transcript_simulated,
                                         session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                         ) ▶₁ #vr ) )
              case KEMTLS_MUTUAL_simulated
              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                       'derived', '0'),
                                            KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                           ) @ #vk.2 ) )
                case c_HKDFExtract
                step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                             ) @ #vk.6 ) )
                  case c_KEM_e_Encaps_ss
                  by step( solve( !KU( ~coins_e ) @ #vk.8 ) )
                next
                  case real_vs_simulated
                  by step( solve( !KU( ~sk_e ) @ #vk.7 ) )
                qed
              next
                case real_vs_simulated
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                            '0'),
                                                                                'derived', '0'),
                                                                     KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                     ~coins_e)),
                                                         'derived', '0'),
                                              KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                             ) @ #vk.3 ) )
                  case c_HKDFExtract
                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                  '0'),
                                                                      'derived', '0'),
                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                               'derived', '0')
                               ) @ #vk.5 ) )
                    case c_HKDFExpand
                    step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                 ) @ #vk.6 ) )
                      case c_KEM_s_Encaps_ss
                      by step( solve( !KU( ~coins_S ) @ #vk.10 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_P ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                     '0'),
                                                                                                         'derived',
                                                                                                         '0'),
                                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                              ~coins_e)),
                                                                                  'derived', '0'),
                                                                       KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                       ~coins_S)),
                                                           'derived', '0'),
                                                KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C))
                               ) @ #vk.4 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                           '0'),
                                                                                               'derived',
                                                                                               '0'),
                                                                                    KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                    ~coins_e)),
                                                                        'derived', '0'),
                                                             KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)),
                                                 'derived', '0')
                                 ) @ #vk.5 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C)
                                   ) @ #vk.6 ) )
                        case c_KEM_c_Encaps_ss
                        by step( solve( !KU( ~coins_C ) @ #vk.10 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P.1 ) @ #vk.9 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( !KU( ~r_c ) @ #vk.19 ) )
              case real_vs_simulated
              step( solve( !KU( ~r_s ) @ #vk.22 ) )
                case real_vs_simulated
                step( solve( !KU( 'ClientHello' ) @ #vk.19 ) )
                  case coerce
                  step( solve( !KD( 'ClientHello' ) ▶₀ #vk.19 ) )
                    case KEMTLS_KEM_c_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case KEMTLS_KEM_s_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case real_vs_simulated
                    step( solve( (#vl.1, 0) ~~> (#vk.19, 0) ) )
                      case d_0_fst
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.14 ) )
                        case KEMTLS_MUTUAL_real
                        by step( contradiction /* impossible chain */ )
                      qed
                    next
                      case d_0_snd
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.14 ) )
                        case KEMTLS_MUTUAL_real
                        by step( contradiction /* impossible chain */ )
                      qed
                    qed
                  qed
                next
                  case pub
                  step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.20 ) )
                    case c_KEM_e_PK
                    by step( solve( !KU( ~sk_e ) @ #vk.35 ) )
                  next
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.21 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.21 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.21, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.18 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.18 ) )
                            case KEMTLS_MUTUAL_real
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.22 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.35 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'CertificateRequest' ) @ #vk.23 ) )
                          case coerce
                          step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.23 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.23, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.23 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.23 ) )
                                case KEMTLS_MUTUAL_real
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( 'ServerCertificate' ) @ #vk.24 ) )
                            case coerce
                            step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.24 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.24, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_MUTUAL_real
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.25 ) )
                              case KEMTLS_KEM_s_KeyGen
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.26 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.26 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.26, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.27 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.35 ) )
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( 'ClientCertificate' ) @ #vk.28 ) )
                                    case coerce
                                    step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.28 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case KEMTLS_KEM_s_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case real_vs_simulated
                                      step( solve( (#vl.2, 0) ~~> (#vk.28, 0) ) )
                                        case d_0_fst
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.30 ) )
                                          case KEMTLS_MUTUAL_real
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case d_0_snd
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.30 ) )
                                          case KEMTLS_MUTUAL_real
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  next
                                    case pub
                                    step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.29 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.30 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.30 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_KEM_c_PK
                                      by step( solve( !KU( ~sk_P.1 ) @ #vk.35 ) )
                                    next
                                      case real_vs_simulated
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.42 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.42 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_KEM_s_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.35 ) )
                            next
                              case real_vs_simulated
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.26 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.26 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.26, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.33 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.33 ) )
                                      case KEMTLS_MUTUAL_real
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.27 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.35 ) )
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( 'ClientCertificate' ) @ #vk.28 ) )
                                    case coerce
                                    step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.28 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case KEMTLS_KEM_s_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case real_vs_simulated
                                      step( solve( (#vl.2, 0) ~~> (#vk.28, 0) ) )
                                        case d_0_fst
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.40 ) )
                                          case KEMTLS_MUTUAL_real
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      next
                                        case d_0_snd
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.40 ) )
                                          case KEMTLS_MUTUAL_real
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  next
                                    case pub
                                    step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.29 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.40 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.40 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_KEM_c_PK
                                      by step( solve( !KU( ~sk_P.1 ) @ #vk.35 ) )
                                    next
                                      case real_vs_simulated
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.52 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.52 ) )
                                              case KEMTLS_MUTUAL_real
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_c_PK
        step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_c_KeyGen
          MIRRORED
        next
          case c_KEM_c_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        next
          case real_vs_simulated
          MIRRORED
        qed
      qed
    next
      case KEMTLS_KEM_s_KeyGen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case KEM_s_PK
        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
          case KEMTLS_KEM_s_KeyGen
          MIRRORED
        next
          case c_KEM_s_PK
          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
        next
          case real_vs_simulated
          MIRRORED
        qed
      qed
    next
      case real_vs_simulated
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case Const_pub_ClientHello
                  step( solve( !KU( 'ClientHello' ) @ #vk ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.8 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.8 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case KEM_e_PK
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case Var_fresh_r_c
                    step( solve( !KU( ~r_c ) @ #vk ) )
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( ~r_c ) @ #vk.2 ) )
                    case real_vs_simulated
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.2 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.3 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( ~r_c ) @ #vk.4 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.3 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.3 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.11 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.11 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.11 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.4 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.5 ) )
                    next
                      case real_vs_simulated
                      MIRRORED
                    qed
                  qed
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case Const_pub_ServerHello
                    step( solve( !KU( 'ServerHello' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.9 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.9 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case KEM_e_Encaps_ct
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e) ) @ #vk ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.2 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    next
                      case d_0_KEM_e_Decaps
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case KEM_e_Encaps_ss
                        by step( solve( !KU( ~sk_e ) @ #vk.1 ) )
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case Var_fresh_r_s
                      step( solve( !KU( ~r_s ) @ #vk ) )
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( ~r_s ) @ #vk.2 ) )
                      case real_vs_simulated
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.2 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.4 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( ~r_s ) @ #vk.4 ) )
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.3 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.3 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.13 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.13 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.13 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.13 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.4 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.6 ) )
                      next
                        case real_vs_simulated
                        MIRRORED
                      qed
                    qed
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case d_0_fst
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case Const_pub_CertificateRequest
                    step( solve( !KU( 'CertificateRequest' ) @ #vk ) )
                      case coerce
                      step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.9 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.9 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      MIRRORED
                    qed
                  qed
                next
                  case d_0_snd
                  step( solve( (#vr.8, 0) ~~> (#i, 1) ) )
                    case d_0_fst
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case Const_pub_ServerCertificate
                        step( solve( !KU( 'ServerCertificate' ) @ #vk ) )
                          case coerce
                          step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.11 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.11 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          MIRRORED
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case KEM_s_PK
                        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk ) )
                          case KEMTLS_KEM_s_KeyGen
                          MIRRORED
                        next
                          case c_KEM_s_PK
                          by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    next
                      case pair
                      step( solve( !KU( 'ServerCertificate' ) @ #vk.1 ) )
                        case coerce
                        step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.1 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.10 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.10 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.2 ) )
                          case KEMTLS_KEM_s_KeyGen
                          MIRRORED
                        next
                          case c_KEM_s_PK
                          by step( solve( !KU( ~sk_P ) @ #vk.3 ) )
                        next
                          case real_vs_simulated
                          MIRRORED
                        qed
                      qed
                    qed
                  next
                    case d_0_snd
                    step( solve( (#vr.9, 0) ~~> (#i, 1) ) )
                      case d_0_fst
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case Const_pub_ClientKEMCiphertext
                          step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk ) )
                            case coerce
                            step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.12 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.12 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            MIRRORED
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case KEM_s_Encaps_ct
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S) ) @ #vk ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.2 ) )
                          next
                            case real_vs_simulated
                            MIRRORED
                          qed
                        next
                          case d_0_KEM_s_Decaps
                          step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                            case KEM_s_Encaps_ss
                            by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                          qed
                        qed
                      next
                        case pair
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.1 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.1 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.11 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.11 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.2 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.4 ) )
                          next
                            case real_vs_simulated
                            MIRRORED
                          qed
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( (#vr.10, 0) ~~> (#i, 1) ) )
                        case d_0_fst
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                            case Const_pub_ClientCertificate
                            step( solve( !KU( 'ClientCertificate' ) @ #vk ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.13 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.13 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                            case KEM_c_PK
                            step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk ) )
                              case KEMTLS_KEM_c_KeyGen
                              MIRRORED
                            next
                              case c_KEM_c_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        next
                          case pair
                          step( solve( !KU( 'ClientCertificate' ) @ #vk.1 ) )
                            case coerce
                            step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.1 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.12 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.12 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk.2 ) )
                              case KEMTLS_KEM_c_KeyGen
                              MIRRORED
                            next
                              case c_KEM_c_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.3 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( (#vr.11, 0) ~~> (#i, 1) ) )
                          case d_0_fst
                          step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                            case Const_pub_ServerKEMCiphertext
                            step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk ) )
                              case coerce
                              step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.13 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.13 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.13 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              MIRRORED
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( (#vr.12, 0) ~~> (#i, 1) ) )
                            case KEM_c_Encaps_ct
                            step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C) ) @ #vk ) )
                              case c_KEM_c_Encaps_ct
                              by step( solve( !KU( ~coins_C ) @ #vk.2 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          next
                            case d_0_KEM_c_Decaps
                            step( solve( (#vr.13, 0) ~~> (#i, 1) ) )
                              case KEM_c_Encaps_ss
                              by step( solve( !KU( ~sk_P ) @ #vk.1 ) )
                            qed
                          qed
                        next
                          case pair
                          step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.1 ) )
                            case coerce
                            step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.1 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.12 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.12 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.12 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C)
                                         ) @ #vk.2 ) )
                              case c_KEM_c_Encaps_ct
                              by step( solve( !KU( ~coins_C ) @ #vk.4 ) )
                            next
                              case real_vs_simulated
                              MIRRORED
                            qed
                          qed
                        qed
                      next
                        case pair
                        step( solve( !KU( 'ClientCertificate' ) @ #vk.3 ) )
                          case coerce
                          step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.3 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.11 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.11 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.11 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_c_PK(~sk_P) ) @ #vk.4 ) )
                            case KEMTLS_KEM_c_KeyGen
                            step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.5 ) )
                              case coerce
                              step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.5 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.11 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.11 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.11 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.11 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C)
                                           ) @ #vk.6 ) )
                                case c_KEM_c_Encaps_ct
                                by step( solve( !KU( ~coins_C ) @ #vk.7 ) )
                              next
                                case real_vs_simulated
                                MIRRORED
                              qed
                            qed
                          next
                            case c_KEM_c_PK
                            by step( solve( !KU( ~sk_P ) @ #vk.7 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.5 ) )
                              case coerce
                              step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.5 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.23 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.23 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.23 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.23 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P), ~coins_C)
                                           ) @ #vk.6 ) )
                                case c_KEM_c_Encaps_ct
                                by step( solve( !KU( ~coins_C ) @ #vk.7 ) )
                              next
                                case real_vs_simulated
                                MIRRORED
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case pair
                      step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.5 ) )
                        case coerce
                        step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.5 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.10 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.10 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.10 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                     ) @ #vk.6 ) )
                          case c_KEM_s_Encaps_ct
                          by step( solve( !KU( ~coins_S ) @ #vk.12 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'ClientCertificate' ) @ #vk.7 ) )
                            case coerce
                            step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.7 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.17 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.17 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.17 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.17 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.8 ) )
                              case KEMTLS_KEM_c_KeyGen
                              step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.9 ) )
                                case coerce
                                step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.9 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.17 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                   ) ▶₁ #vr.17 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.17 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                   ) ▶₁ #vr.17 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                             ) @ #vk.10 ) )
                                  case c_KEM_c_Encaps_ct
                                  by step( solve( !KU( ~coins_C ) @ #vk.11 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            next
                              case c_KEM_c_PK
                              by step( solve( !KU( ~sk_P.1 ) @ #vk.11 ) )
                            next
                              case real_vs_simulated
                              step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.9 ) )
                                case coerce
                                step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.9 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.29 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                   ) ▶₁ #vr.29 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.29 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                   ) ▶₁ #vr.29 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                             ) @ #vk.10 ) )
                                  case c_KEM_c_Encaps_ct
                                  by step( solve( !KU( ~coins_C ) @ #vk.11 ) )
                                next
                                  case real_vs_simulated
                                  MIRRORED
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case pair
                    step( solve( !KU( 'ServerCertificate' ) @ #vk.7 ) )
                      case coerce
                      step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.7 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.7, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.9 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.9 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.9 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.8 ) )
                        case KEMTLS_KEM_s_KeyGen
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.9 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.9 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.9 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.9 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.9 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.9 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.10 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.15 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.11 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.11 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.16 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.16 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.16 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.16 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.12 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.16 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.16 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.16 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.16 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.15 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.28 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.28 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.28 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.28 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.15 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.9 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.9 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.9, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.19 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                             ) ▶₁ #vr.19 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.19 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                             ) ▶₁ #vr.19 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.10 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.15 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.11 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.11 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.26 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.26 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.26 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.26 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.12 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.26 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.26 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.26 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.26 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.15 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.13 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.13 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.13, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.38 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.5), KEM_s_PK(~sk_P.4)>
                                                     ) ▶₁ #vr.38 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.38 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.5), KEM_s_PK(~sk_P.4)>
                                                     ) ▶₁ #vr.38 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.14 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.15 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case pair
                  step( solve( !KU( 'CertificateRequest' ) @ #vk.8 ) )
                    case coerce
                    step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.8 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.8, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.8 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.8 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.8 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( 'ServerCertificate' ) @ #vk.9 ) )
                      case coerce
                      step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.9 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.9, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.8 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.8 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.10 ) )
                        case KEMTLS_KEM_s_KeyGen
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.8 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.8 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.8 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.8 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.12 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.17 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.13 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.13 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.13, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.15 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.15 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.15 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.15 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.14 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.15 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.15 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.15 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.15 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.17 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.27 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.27 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.27 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.27 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_KEM_s_PK
                        by step( solve( !KU( ~sk_P ) @ #vk.17 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.11 ) )
                          case coerce
                          step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.11 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.2, 0) ~~> (#vk.11, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.18 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                             ) ▶₁ #vr.18 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.18 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                             ) ▶₁ #vr.18 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                       ) @ #vk.12 ) )
                            case c_KEM_s_Encaps_ct
                            by step( solve( !KU( ~coins_S ) @ #vk.17 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientCertificate' ) @ #vk.13 ) )
                              case coerce
                              step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.13 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.13, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.25 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.25 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.25 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.25 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.14 ) )
                                case KEMTLS_KEM_c_KeyGen
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.25 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.25 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.25 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.25 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              next
                                case c_KEM_c_PK
                                by step( solve( !KU( ~sk_P.1 ) @ #vk.17 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.15 ) )
                                  case coerce
                                  step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.15 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.3, 0) ~~> (#vk.15, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.37 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.5), KEM_s_PK(~sk_P.4)>
                                                     ) ▶₁ #vr.37 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.37 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.5), KEM_s_PK(~sk_P.4)>
                                                     ) ▶₁ #vr.37 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                               ) @ #vk.16 ) )
                                    case c_KEM_c_Encaps_ct
                                    by step( solve( !KU( ~coins_C ) @ #vk.17 ) )
                                  next
                                    case real_vs_simulated
                                    MIRRORED
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case pair
                step( solve( !KU( ~r_s ) @ #vk.13 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ServerHello' ) @ #vk.12 ) )
                    case coerce
                    step( solve( !KD( 'ServerHello' ) ▶₀ #vk.12 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.12, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.12 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.12 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.12 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.12 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                 ) @ #vk.13 ) )
                      case c_KEM_e_Encaps_ct
                      by step( solve( !KU( ~coins_e ) @ #vk.24 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'CertificateRequest' ) @ #vk.14 ) )
                        case coerce
                        step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.14 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.14, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.17 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.17 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.17 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.17 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( 'ServerCertificate' ) @ #vk.15 ) )
                          case coerce
                          step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.15 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.15, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.17 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.17 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.17 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.17 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.16 ) )
                            case KEMTLS_KEM_s_KeyGen
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.17 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.17 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.17 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.17 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.18 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.23 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ClientCertificate' ) @ #vk.19 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.19 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.19, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.24 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.24 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.20 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.24 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)
                                                                         >
                                                         ) ▶₁ #vr.24 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.24 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)
                                                                         >
                                                         ) ▶₁ #vr.24 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  next
                                    case c_KEM_c_PK
                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.23 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.36 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)
                                                                         >
                                                         ) ▶₁ #vr.36 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.36 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)
                                                                         >
                                                         ) ▶₁ #vr.36 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_KEM_s_PK
                            by step( solve( !KU( ~sk_P ) @ #vk.23 ) )
                          next
                            case real_vs_simulated
                            step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.17 ) )
                              case coerce
                              step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.17 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.2, 0) ~~> (#vk.17, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.27 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.27 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.27 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                 ) ▶₁ #vr.27 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                           ) @ #vk.18 ) )
                                case c_KEM_s_Encaps_ct
                                by step( solve( !KU( ~coins_S ) @ #vk.23 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ClientCertificate' ) @ #vk.19 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.19 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.19, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.34 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.34 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.20 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.34 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)
                                                                         >
                                                         ) ▶₁ #vr.34 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.34 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)
                                                                         >
                                                         ) ▶₁ #vr.34 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  next
                                    case c_KEM_c_PK
                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.23 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.21 ) )
                                      case coerce
                                      step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.21 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.3, 0) ~~> (#vk.21, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.46 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.5), KEM_s_PK(~sk_P.4)
                                                                         >
                                                         ) ▶₁ #vr.46 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.46 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.5), KEM_s_PK(~sk_P.4)
                                                                         >
                                                         ) ▶₁ #vr.46 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                   ) @ #vk.22 ) )
                                        case c_KEM_c_Encaps_ct
                                        by step( solve( !KU( ~coins_C ) @ #vk.23 ) )
                                      next
                                        case real_vs_simulated
                                        MIRRORED
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( ~r_c ) @ #vk.16 ) )
                case real_vs_simulated
                step( solve( !KU( ~r_s ) @ #vk.19 ) )
                  case real_vs_simulated
                  step( solve( !KU( 'ClientHello' ) @ #vk.16 ) )
                    case coerce
                    step( solve( !KD( 'ClientHello' ) ▶₀ #vk.16 ) )
                      case KEMTLS_KEM_c_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case KEMTLS_KEM_s_KeyGen
                      by step( contradiction /* impossible chain */ )
                    next
                      case real_vs_simulated
                      step( solve( (#vl.1, 0) ~~> (#vk.16, 0) ) )
                        case d_0_fst
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.15 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.15 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      next
                        case d_0_snd
                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                     public_keys
                                     ) ▶₀ #vr.15 ) )
                          case KEMTLS_MUTUAL_real
                          step( solve( FakeTranscript( transcript_simulated,
                                                       session_keys_simulated,
                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                       ) ▶₁ #vr.15 ) )
                            case KEMTLS_MUTUAL_simulated
                            by step( contradiction /* impossible chain */ )
                          qed
                        qed
                      qed
                    qed
                  next
                    case pub
                    step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.17 ) )
                      case c_KEM_e_PK
                      by step( solve( !KU( ~sk_e ) @ #vk.29 ) )
                    next
                      case real_vs_simulated
                      step( solve( !KU( 'ServerHello' ) @ #vk.18 ) )
                        case coerce
                        step( solve( !KD( 'ServerHello' ) ▶₀ #vk.18 ) )
                          case KEMTLS_KEM_c_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case KEMTLS_KEM_s_KeyGen
                          by step( contradiction /* impossible chain */ )
                        next
                          case real_vs_simulated
                          step( solve( (#vl.1, 0) ~~> (#vk.18, 0) ) )
                            case d_0_fst
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.19 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.19 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          next
                            case d_0_snd
                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                         public_keys
                                         ) ▶₀ #vr.19 ) )
                              case KEMTLS_MUTUAL_real
                              step( solve( FakeTranscript( transcript_simulated,
                                                           session_keys_simulated,
                                                           <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                           ) ▶₁ #vr.19 ) )
                                case KEMTLS_MUTUAL_simulated
                                by step( contradiction /* impossible chain */ )
                              qed
                            qed
                          qed
                        qed
                      next
                        case pub
                        step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                     ) @ #vk.19 ) )
                          case c_KEM_e_Encaps_ct
                          by step( solve( !KU( ~coins_e ) @ #vk.29 ) )
                        next
                          case real_vs_simulated
                          step( solve( !KU( 'CertificateRequest' ) @ #vk.20 ) )
                            case coerce
                            step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.20 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.20, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.24 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.24 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.24 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( 'ServerCertificate' ) @ #vk.21 ) )
                              case coerce
                              step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.21 ) )
                                case KEMTLS_KEM_c_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case KEMTLS_KEM_s_KeyGen
                                by step( contradiction /* impossible chain */ )
                              next
                                case real_vs_simulated
                                step( solve( (#vl.1, 0) ~~> (#vk.21, 0) ) )
                                  case d_0_fst
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.24 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.24 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                next
                                  case d_0_snd
                                  step( solve( RealTranscript( transcript_real, session_keys_real,
                                                               public_keys
                                               ) ▶₀ #vr.24 ) )
                                    case KEMTLS_MUTUAL_real
                                    step( solve( FakeTranscript( transcript_simulated,
                                                                 session_keys_simulated,
                                                                 <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                 ) ▶₁ #vr.24 ) )
                                      case KEMTLS_MUTUAL_simulated
                                      by step( contradiction /* impossible chain */ )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case pub
                              step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.22 ) )
                                case KEMTLS_KEM_s_KeyGen
                                step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.23 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.23 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.23, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.24 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.24 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                     ) ▶₁ #vr.24 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                               ) @ #vk.24 ) )
                                    case c_KEM_s_Encaps_ct
                                    by step( solve( !KU( ~coins_S ) @ #vk.29 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ClientCertificate' ) @ #vk.25 ) )
                                      case coerce
                                      step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.25 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.2, 0) ~~> (#vk.25, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.31 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)
                                                                         >
                                                         ) ▶₁ #vr.31 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.31 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)
                                                                         >
                                                         ) ▶₁ #vr.31 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.26 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.31 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.3), 
                                                                              KEM_s_PK(~sk_P.2)>
                                                             ) ▶₁ #vr.31 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.31 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.3), 
                                                                              KEM_s_PK(~sk_P.2)>
                                                             ) ▶₁ #vr.31 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_KEM_c_PK
                                        by step( solve( !KU( ~sk_P.1 ) @ #vk.29 ) )
                                      next
                                        case real_vs_simulated
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.43 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.4), 
                                                                              KEM_s_PK(~sk_P.3)>
                                                             ) ▶₁ #vr.43 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.43 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.4), 
                                                                              KEM_s_PK(~sk_P.3)>
                                                             ) ▶₁ #vr.43 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_KEM_s_PK
                                by step( solve( !KU( ~sk_P ) @ #vk.29 ) )
                              next
                                case real_vs_simulated
                                step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.23 ) )
                                  case coerce
                                  step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.23 ) )
                                    case KEMTLS_KEM_c_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case KEMTLS_KEM_s_KeyGen
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case real_vs_simulated
                                    step( solve( (#vl.2, 0) ~~> (#vk.23, 0) ) )
                                      case d_0_fst
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.34 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    next
                                      case d_0_snd
                                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                   public_keys
                                                   ) ▶₀ #vr.34 ) )
                                        case KEMTLS_MUTUAL_real
                                        step( solve( FakeTranscript( transcript_simulated,
                                                                     session_keys_simulated,
                                                                     <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                     ) ▶₁ #vr.34 ) )
                                          case KEMTLS_MUTUAL_simulated
                                          by step( contradiction /* impossible chain */ )
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case pub
                                  step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                               ) @ #vk.24 ) )
                                    case c_KEM_s_Encaps_ct
                                    by step( solve( !KU( ~coins_S ) @ #vk.29 ) )
                                  next
                                    case real_vs_simulated
                                    step( solve( !KU( 'ClientCertificate' ) @ #vk.25 ) )
                                      case coerce
                                      step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.25 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case KEMTLS_KEM_s_KeyGen
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case real_vs_simulated
                                        step( solve( (#vl.2, 0) ~~> (#vk.25, 0) ) )
                                          case d_0_fst
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.41 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)
                                                                         >
                                                         ) ▶₁ #vr.41 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        next
                                          case d_0_snd
                                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                       public_keys
                                                       ) ▶₀ #vr.41 ) )
                                            case KEMTLS_MUTUAL_real
                                            step( solve( FakeTranscript( transcript_simulated,
                                                                         session_keys_simulated,
                                                                         <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)
                                                                         >
                                                         ) ▶₁ #vr.41 ) )
                                              case KEMTLS_MUTUAL_simulated
                                              by step( contradiction /* impossible chain */ )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case pub
                                      step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.26 ) )
                                        case KEMTLS_KEM_c_KeyGen
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.41 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.4), 
                                                                              KEM_s_PK(~sk_P.3)>
                                                             ) ▶₁ #vr.41 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.41 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.4), 
                                                                              KEM_s_PK(~sk_P.3)>
                                                             ) ▶₁ #vr.41 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      next
                                        case c_KEM_c_PK
                                        by step( solve( !KU( ~sk_P.1 ) @ #vk.29 ) )
                                      next
                                        case real_vs_simulated
                                        step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.27 ) )
                                          case coerce
                                          step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.27 ) )
                                            case KEMTLS_KEM_c_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case KEMTLS_KEM_s_KeyGen
                                            by step( contradiction /* impossible chain */ )
                                          next
                                            case real_vs_simulated
                                            step( solve( (#vl.3, 0) ~~> (#vk.27, 0) ) )
                                              case d_0_fst
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.53 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.5), 
                                                                              KEM_s_PK(~sk_P.4)>
                                                             ) ▶₁ #vr.53 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            next
                                              case d_0_snd
                                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                           public_keys
                                                           ) ▶₀ #vr.53 ) )
                                                case KEMTLS_MUTUAL_real
                                                step( solve( FakeTranscript( transcript_simulated,
                                                                             session_keys_simulated,
                                                                             <KEM_c_PK(~sk_P.5), 
                                                                              KEM_s_PK(~sk_P.4)>
                                                             ) ▶₁ #vr.53 ) )
                                                  case KEMTLS_MUTUAL_simulated
                                                  by step( contradiction /* impossible chain */ )
                                                qed
                                              qed
                                            qed
                                          qed
                                        next
                                          case pub
                                          step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                       ) @ #vk.28 ) )
                                            case c_KEM_c_Encaps_ct
                                            by step( solve( !KU( ~coins_C ) @ #vk.29 ) )
                                          next
                                            case real_vs_simulated
                                            MIRRORED
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
              case d_0_fst
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case HKDFExtract
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                         'derived', '0'),
                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                             ) @ #vk ) )
                  case c_HKDFExtract
                  step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                               ) @ #vk.2 ) )
                    case c_KEM_e_Encaps_ss
                    by step( solve( !KU( ~coins_e ) @ #vk.4 ) )
                  next
                    case real_vs_simulated
                    by step( solve( !KU( ~sk_e ) @ #vk.3 ) )
                  qed
                next
                  case real_vs_simulated
                  MIRRORED
                qed
              qed
            next
              case d_0_snd
              step( solve( (#vr.6, 0) ~~> (#i, 1) ) )
                case d_0_fst
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case HKDFExtract
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                              '0'),
                                                                                  'derived', '0'),
                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                       ~coins_e)),
                                                           'derived', '0'),
                                                KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                               ) @ #vk ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                    '0'),
                                                                        'derived', '0'),
                                                             KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                                 'derived', '0')
                                 ) @ #vk.1 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                   ) @ #vk.2 ) )
                        case c_KEM_s_Encaps_ss
                        by step( solve( !KU( ~coins_S ) @ #vk.7 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              next
                case d_0_snd
                step( solve( (#vr.7, 0) ~~> (#i, 1) ) )
                  case HKDFExtract
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                     '0'),
                                                                                                         'derived',
                                                                                                         '0'),
                                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                              ~coins_e)),
                                                                                  'derived', '0'),
                                                                       KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                       ~coins_S)),
                                                           'derived', '0'),
                                                KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C))
                               ) @ #vk ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                           '0'),
                                                                                               'derived',
                                                                                               '0'),
                                                                                    KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                    ~coins_e)),
                                                                        'derived', '0'),
                                                             KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)),
                                                 'derived', '0')
                                 ) @ #vk.1 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C)
                                   ) @ #vk.2 ) )
                        case c_KEM_c_Encaps_ss
                        by step( solve( !KU( ~coins_C ) @ #vk.7 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P.1 ) @ #vk.6 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              next
                case pair
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                            '0'),
                                                                                'derived', '0'),
                                                                     KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                     ~coins_e)),
                                                         'derived', '0'),
                                              KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                             ) @ #vk.1 ) )
                  case c_HKDFExtract
                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                  '0'),
                                                                      'derived', '0'),
                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                               'derived', '0')
                               ) @ #vk.3 ) )
                    case c_HKDFExpand
                    step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                 ) @ #vk.4 ) )
                      case c_KEM_s_Encaps_ss
                      by step( solve( !KU( ~coins_S ) @ #vk.9 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_P ) @ #vk.8 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                     '0'),
                                                                                                         'derived',
                                                                                                         '0'),
                                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                              ~coins_e)),
                                                                                  'derived', '0'),
                                                                       KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                       ~coins_S)),
                                                           'derived', '0'),
                                                KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C))
                               ) @ #vk.2 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                           '0'),
                                                                                               'derived',
                                                                                               '0'),
                                                                                    KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                    ~coins_e)),
                                                                        'derived', '0'),
                                                             KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)),
                                                 'derived', '0')
                                 ) @ #vk.3 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C)
                                   ) @ #vk.4 ) )
                        case c_KEM_c_Encaps_ss
                        by step( solve( !KU( ~coins_C ) @ #vk.8 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P.1 ) @ #vk.7 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            next
              case pair
              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                       'derived', '0'),
                                            KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e))
                           ) @ #vk.2 ) )
                case c_HKDFExtract
                step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                             ) @ #vk.6 ) )
                  case c_KEM_e_Encaps_ss
                  by step( solve( !KU( ~coins_e ) @ #vk.8 ) )
                next
                  case real_vs_simulated
                  by step( solve( !KU( ~sk_e ) @ #vk.7 ) )
                qed
              next
                case real_vs_simulated
                step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                            '0'),
                                                                                'derived', '0'),
                                                                     KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                     ~coins_e)),
                                                         'derived', '0'),
                                              KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S))
                             ) @ #vk.3 ) )
                  case c_HKDFExtract
                  step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                  '0'),
                                                                      'derived', '0'),
                                                           KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)),
                                               'derived', '0')
                               ) @ #vk.5 ) )
                    case c_HKDFExpand
                    step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                 ) @ #vk.6 ) )
                      case c_KEM_s_Encaps_ss
                      by step( solve( !KU( ~coins_S ) @ #vk.10 ) )
                    next
                      case real_vs_simulated
                      by step( solve( !KU( ~sk_P ) @ #vk.9 ) )
                    qed
                  qed
                next
                  case real_vs_simulated
                  step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                     '0'),
                                                                                                         'derived',
                                                                                                         '0'),
                                                                                              KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                              ~coins_e)),
                                                                                  'derived', '0'),
                                                                       KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                       ~coins_S)),
                                                           'derived', '0'),
                                                KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C))
                               ) @ #vk.4 ) )
                    case c_HKDFExtract
                    step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                           '0'),
                                                                                               'derived',
                                                                                               '0'),
                                                                                    KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                    ~coins_e)),
                                                                        'derived', '0'),
                                                             KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)),
                                                 'derived', '0')
                                 ) @ #vk.5 ) )
                      case c_HKDFExpand
                      step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1), ~coins_C)
                                   ) @ #vk.6 ) )
                        case c_KEM_c_Encaps_ss
                        by step( solve( !KU( ~coins_C ) @ #vk.10 ) )
                      next
                        case real_vs_simulated
                        by step( solve( !KU( ~sk_P.1 ) @ #vk.9 ) )
                      qed
                    qed
                  next
                    case real_vs_simulated
                    MIRRORED
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( RealTranscript( transcript_real, session_keys_real,
                                     public_keys
                     ) ▶₀ #vr ) )
          case KEMTLS_MUTUAL_real
          step( solve( FakeTranscript( transcript_simulated,
                                       session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                       ) ▶₁ #vr ) )
            case KEMTLS_MUTUAL_simulated
            step( solve( !KU( ~r_c ) @ #vk.19 ) )
              case real_vs_simulated
              step( solve( !KU( ~r_s ) @ #vk.22 ) )
                case real_vs_simulated
                step( solve( !KU( 'ClientHello' ) @ #vk.19 ) )
                  case coerce
                  step( solve( !KD( 'ClientHello' ) ▶₀ #vk.19 ) )
                    case KEMTLS_KEM_c_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case KEMTLS_KEM_s_KeyGen
                    by step( contradiction /* impossible chain */ )
                  next
                    case real_vs_simulated
                    step( solve( (#vl.1, 0) ~~> (#vk.19, 0) ) )
                      case d_0_fst
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.14 ) )
                        case KEMTLS_MUTUAL_real
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                     ) ▶₁ #vr.14 ) )
                          case KEMTLS_MUTUAL_simulated
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    next
                      case d_0_snd
                      step( solve( RealTranscript( transcript_real, session_keys_real,
                                                   public_keys
                                   ) ▶₀ #vr.14 ) )
                        case KEMTLS_MUTUAL_real
                        step( solve( FakeTranscript( transcript_simulated,
                                                     session_keys_simulated,
                                                     <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                     ) ▶₁ #vr.14 ) )
                          case KEMTLS_MUTUAL_simulated
                          by step( contradiction /* impossible chain */ )
                        qed
                      qed
                    qed
                  qed
                next
                  case pub
                  step( solve( !KU( KEM_e_PK(~sk_e) ) @ #vk.20 ) )
                    case c_KEM_e_PK
                    by step( solve( !KU( ~sk_e ) @ #vk.35 ) )
                  next
                    case real_vs_simulated
                    step( solve( !KU( 'ServerHello' ) @ #vk.21 ) )
                      case coerce
                      step( solve( !KD( 'ServerHello' ) ▶₀ #vk.21 ) )
                        case KEMTLS_KEM_c_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case KEMTLS_KEM_s_KeyGen
                        by step( contradiction /* impossible chain */ )
                      next
                        case real_vs_simulated
                        step( solve( (#vl.1, 0) ~~> (#vk.21, 0) ) )
                          case d_0_fst
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.18 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.18 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        next
                          case d_0_snd
                          step( solve( RealTranscript( transcript_real, session_keys_real,
                                                       public_keys
                                       ) ▶₀ #vr.18 ) )
                            case KEMTLS_MUTUAL_real
                            step( solve( FakeTranscript( transcript_simulated,
                                                         session_keys_simulated,
                                                         <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                         ) ▶₁ #vr.18 ) )
                              case KEMTLS_MUTUAL_simulated
                              by step( contradiction /* impossible chain */ )
                            qed
                          qed
                        qed
                      qed
                    next
                      case pub
                      step( solve( !KU( KEM_e_Encaps_ct(KEM_e_PK(~sk_e), ~coins_e)
                                   ) @ #vk.22 ) )
                        case c_KEM_e_Encaps_ct
                        by step( solve( !KU( ~coins_e ) @ #vk.35 ) )
                      next
                        case real_vs_simulated
                        step( solve( !KU( 'CertificateRequest' ) @ #vk.23 ) )
                          case coerce
                          step( solve( !KD( 'CertificateRequest' ) ▶₀ #vk.23 ) )
                            case KEMTLS_KEM_c_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case KEMTLS_KEM_s_KeyGen
                            by step( contradiction /* impossible chain */ )
                          next
                            case real_vs_simulated
                            step( solve( (#vl.1, 0) ~~> (#vk.23, 0) ) )
                              case d_0_fst
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.23 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.23 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            next
                              case d_0_snd
                              step( solve( RealTranscript( transcript_real, session_keys_real,
                                                           public_keys
                                           ) ▶₀ #vr.23 ) )
                                case KEMTLS_MUTUAL_real
                                step( solve( FakeTranscript( transcript_simulated,
                                                             session_keys_simulated,
                                                             <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                             ) ▶₁ #vr.23 ) )
                                  case KEMTLS_MUTUAL_simulated
                                  by step( contradiction /* impossible chain */ )
                                qed
                              qed
                            qed
                          qed
                        next
                          case pub
                          step( solve( !KU( 'ServerCertificate' ) @ #vk.24 ) )
                            case coerce
                            step( solve( !KD( 'ServerCertificate' ) ▶₀ #vk.24 ) )
                              case KEMTLS_KEM_c_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case KEMTLS_KEM_s_KeyGen
                              by step( contradiction /* impossible chain */ )
                            next
                              case real_vs_simulated
                              step( solve( (#vl.1, 0) ~~> (#vk.24, 0) ) )
                                case d_0_fst
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.23 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              next
                                case d_0_snd
                                step( solve( RealTranscript( transcript_real, session_keys_real,
                                                             public_keys
                                             ) ▶₀ #vr.23 ) )
                                  case KEMTLS_MUTUAL_real
                                  step( solve( FakeTranscript( transcript_simulated,
                                                               session_keys_simulated,
                                                               <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                               ) ▶₁ #vr.23 ) )
                                    case KEMTLS_MUTUAL_simulated
                                    by step( contradiction /* impossible chain */ )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case pub
                            step( solve( !KU( KEM_s_PK(~sk_P) ) @ #vk.25 ) )
                              case KEMTLS_KEM_s_KeyGen
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.26 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.26 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.26, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                   ) ▶₁ #vr.23 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.23 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                   ) ▶₁ #vr.23 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.27 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.35 ) )
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( 'ClientCertificate' ) @ #vk.28 ) )
                                    case coerce
                                    step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.28 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case KEMTLS_KEM_s_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case real_vs_simulated
                                      step( solve( (#vl.2, 0) ~~> (#vk.28, 0) ) )
                                        case d_0_fst
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.30 ) )
                                          case KEMTLS_MUTUAL_real
                                          step( solve( FakeTranscript( transcript_simulated,
                                                                       session_keys_simulated,
                                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                       ) ▶₁ #vr.30 ) )
                                            case KEMTLS_MUTUAL_simulated
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case d_0_snd
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.30 ) )
                                          case KEMTLS_MUTUAL_real
                                          step( solve( FakeTranscript( transcript_simulated,
                                                                       session_keys_simulated,
                                                                       <KEM_c_PK(~sk_P.3), KEM_s_PK(~sk_P.2)>
                                                       ) ▶₁ #vr.30 ) )
                                            case KEMTLS_MUTUAL_simulated
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case pub
                                    step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.29 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.30 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.3), 
                                                                            KEM_s_PK(~sk_P.2)>
                                                           ) ▶₁ #vr.30 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.30 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.3), 
                                                                            KEM_s_PK(~sk_P.2)>
                                                           ) ▶₁ #vr.30 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_KEM_c_PK
                                      by step( solve( !KU( ~sk_P.1 ) @ #vk.35 ) )
                                    next
                                      case real_vs_simulated
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.42 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.4), 
                                                                            KEM_s_PK(~sk_P.3)>
                                                           ) ▶₁ #vr.42 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.42 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.4), 
                                                                            KEM_s_PK(~sk_P.3)>
                                                           ) ▶₁ #vr.42 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_KEM_s_PK
                              by step( solve( !KU( ~sk_P ) @ #vk.35 ) )
                            next
                              case real_vs_simulated
                              step( solve( !KU( 'ClientKEMCiphertext' ) @ #vk.26 ) )
                                case coerce
                                step( solve( !KD( 'ClientKEMCiphertext' ) ▶₀ #vk.26 ) )
                                  case KEMTLS_KEM_c_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case KEMTLS_KEM_s_KeyGen
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case real_vs_simulated
                                  step( solve( (#vl.2, 0) ~~> (#vk.26, 0) ) )
                                    case d_0_fst
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.33 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                   ) ▶₁ #vr.33 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  next
                                    case d_0_snd
                                    step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                 public_keys
                                                 ) ▶₀ #vr.33 ) )
                                      case KEMTLS_MUTUAL_real
                                      step( solve( FakeTranscript( transcript_simulated,
                                                                   session_keys_simulated,
                                                                   <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                   ) ▶₁ #vr.33 ) )
                                        case KEMTLS_MUTUAL_simulated
                                        by step( contradiction /* impossible chain */ )
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case pub
                                step( solve( !KU( KEM_s_Encaps_ct(KEM_s_PK(~sk_P), ~coins_S)
                                             ) @ #vk.27 ) )
                                  case c_KEM_s_Encaps_ct
                                  by step( solve( !KU( ~coins_S ) @ #vk.35 ) )
                                next
                                  case real_vs_simulated
                                  step( solve( !KU( 'ClientCertificate' ) @ #vk.28 ) )
                                    case coerce
                                    step( solve( !KD( 'ClientCertificate' ) ▶₀ #vk.28 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case KEMTLS_KEM_s_KeyGen
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case real_vs_simulated
                                      step( solve( (#vl.2, 0) ~~> (#vk.28, 0) ) )
                                        case d_0_fst
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.40 ) )
                                          case KEMTLS_MUTUAL_real
                                          step( solve( FakeTranscript( transcript_simulated,
                                                                       session_keys_simulated,
                                                                       <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                       ) ▶₁ #vr.40 ) )
                                            case KEMTLS_MUTUAL_simulated
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      next
                                        case d_0_snd
                                        step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                     public_keys
                                                     ) ▶₀ #vr.40 ) )
                                          case KEMTLS_MUTUAL_real
                                          step( solve( FakeTranscript( transcript_simulated,
                                                                       session_keys_simulated,
                                                                       <KEM_c_PK(~sk_P.4), KEM_s_PK(~sk_P.3)>
                                                       ) ▶₁ #vr.40 ) )
                                            case KEMTLS_MUTUAL_simulated
                                            by step( contradiction /* impossible chain */ )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case pub
                                    step( solve( !KU( KEM_c_PK(~sk_P.1) ) @ #vk.29 ) )
                                      case KEMTLS_KEM_c_KeyGen
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.40 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.4), 
                                                                            KEM_s_PK(~sk_P.3)>
                                                           ) ▶₁ #vr.40 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.40 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.4), 
                                                                            KEM_s_PK(~sk_P.3)>
                                                           ) ▶₁ #vr.40 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_KEM_c_PK
                                      by step( solve( !KU( ~sk_P.1 ) @ #vk.35 ) )
                                    next
                                      case real_vs_simulated
                                      step( solve( !KU( 'ServerKEMCiphertext' ) @ #vk.30 ) )
                                        case coerce
                                        step( solve( !KD( 'ServerKEMCiphertext' ) ▶₀ #vk.30 ) )
                                          case KEMTLS_KEM_c_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case KEMTLS_KEM_s_KeyGen
                                          by step( contradiction /* impossible chain */ )
                                        next
                                          case real_vs_simulated
                                          step( solve( (#vl.3, 0) ~~> (#vk.30, 0) ) )
                                            case d_0_fst
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.52 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.5), 
                                                                            KEM_s_PK(~sk_P.4)>
                                                           ) ▶₁ #vr.52 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          next
                                            case d_0_snd
                                            step( solve( RealTranscript( transcript_real, session_keys_real,
                                                                         public_keys
                                                         ) ▶₀ #vr.52 ) )
                                              case KEMTLS_MUTUAL_real
                                              step( solve( FakeTranscript( transcript_simulated,
                                                                           session_keys_simulated,
                                                                           <KEM_c_PK(~sk_P.5), 
                                                                            KEM_s_PK(~sk_P.4)>
                                                           ) ▶₁ #vr.52 ) )
                                                case KEMTLS_MUTUAL_simulated
                                                by step( contradiction /* impossible chain */ )
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case pub
                                        step( solve( !KU( KEM_c_Encaps_ct(KEM_c_PK(~sk_P.1), ~coins_C)
                                                     ) @ #vk.31 ) )
                                          case c_KEM_c_Encaps_ct
                                          by step( solve( !KU( ~coins_C ) @ #vk.35 ) )
                                        next
                                          case real_vs_simulated
                                          step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract('0', '0'),
                                                                                   'derived', '0'),
                                                                        KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                        ~coins_e))
                                                       ) @ #vk.32 ) )
                                            case c_HKDFExtract
                                            step( solve( !KU( KEM_e_Encaps_ss(KEM_e_PK(~sk_e), ~coins_e)
                                                         ) @ #vk.36 ) )
                                              case c_KEM_e_Encaps_ss
                                              by step( solve( !KU( ~coins_e ) @ #vk.37 ) )
                                            next
                                              case real_vs_simulated
                                              by step( solve( !KU( ~sk_e ) @ #vk.37 ) )
                                            qed
                                          next
                                            case real_vs_simulated
                                            step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                        '0'),
                                                                                                            'derived',
                                                                                                            '0'),
                                                                                                 KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                 ~coins_e)),
                                                                                     'derived', '0'),
                                                                          KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                          ~coins_S))
                                                         ) @ #vk.33 ) )
                                              case c_HKDFExtract
                                              step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                              '0'),
                                                                                                  'derived',
                                                                                                  '0'),
                                                                                       KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                       ~coins_e)),
                                                                           'derived', '0')
                                                           ) @ #vk.35 ) )
                                                case c_HKDFExpand
                                                step( solve( !KU( KEM_s_Encaps_ss(KEM_s_PK(~sk_P), ~coins_S)
                                                             ) @ #vk.36 ) )
                                                  case c_KEM_s_Encaps_ss
                                                  by step( solve( !KU( ~coins_S ) @ #vk.39 ) )
                                                next
                                                  case real_vs_simulated
                                                  by step( solve( !KU( ~sk_P ) @ #vk.39 ) )
                                                qed
                                              qed
                                            next
                                              case real_vs_simulated
                                              step( solve( !KU( HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                                 '0'),
                                                                                                                                     'derived',
                                                                                                                                     '0'),
                                                                                                                          KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                          ~coins_e)),
                                                                                                              'derived',
                                                                                                              '0'),
                                                                                                   KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                                   ~coins_S)),
                                                                                       'derived', '0'),
                                                                            KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                            ~coins_C))
                                                           ) @ #vk.34 ) )
                                                case c_HKDFExtract
                                                step( solve( !KU( HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract(HKDFExpand(HKDFExtract('0',
                                                                                                                                       '0'),
                                                                                                                           'derived',
                                                                                                                           '0'),
                                                                                                                KEM_e_Encaps_ss(KEM_e_PK(~sk_e),
                                                                                                                                ~coins_e)),
                                                                                                    'derived',
                                                                                                    '0'),
                                                                                         KEM_s_Encaps_ss(KEM_s_PK(~sk_P),
                                                                                                         ~coins_S)),
                                                                             'derived', '0')
                                                             ) @ #vk.35 ) )
                                                  case c_HKDFExpand
                                                  step( solve( !KU( KEM_c_Encaps_ss(KEM_c_PK(~sk_P.1),
                                                                                    ~coins_C)
                                                               ) @ #vk.36 ) )
                                                    case c_KEM_c_Encaps_ss
                                                    by step( solve( !KU( ~coins_C ) @ #vk.39 ) )
                                                  next
                                                    case real_vs_simulated
                                                    by step( solve( !KU( ~sk_P.1 ) @ #vk.39 ) )
                                                  qed
                                                qed
                                              next
                                                case real_vs_simulated
                                                MIRRORED
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_KEMTLS_KEM_c_KeyGen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_KEMTLS_KEM_s_KeyGen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_KEMTLS_MUTUAL_real
  backward-search
    case LHS
    step( simplify )
    step( solve( !Ltk( $C, pk_C, sk_C, 'KEM_c' ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( !Ltk( $S, pk_S, sk_S, 'KEM_s' ) ▶₁ #i ) )
        case KEMTLS_KEM_s_KeyGen
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Ltk( $C, pk_C, sk_C, 'KEM_c' ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( !Ltk( $S, pk_S, sk_S, 'KEM_s' ) ▶₁ #i ) )
        case KEMTLS_KEM_s_KeyGen
        MIRRORED
      qed
    qed
  qed
next
  case Rule_KEMTLS_MUTUAL_simulated
  backward-search
    case LHS
    step( simplify )
    step( solve( !Pk( $C, pk_C, 'KEM_c' ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( !Pk( $S, pk_S, 'KEM_s' ) ▶₁ #i ) )
        case KEMTLS_KEM_s_KeyGen
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Pk( $C, pk_C, 'KEM_c' ) ▶₀ #i ) )
      case KEMTLS_KEM_c_KeyGen
      step( solve( !Pk( $S, pk_S, 'KEM_s' ) ▶₁ #i ) )
        case KEMTLS_KEM_s_KeyGen
        MIRRORED
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_real_vs_simulated
  backward-search
    case LHS
    step( simplify )
    step( solve( RealTranscript( transcript_real, session_keys_real,
                                 public_keys
                 ) ▶₀ #i ) )
      case KEMTLS_MUTUAL_real
      step( solve( FakeTranscript( transcript_simulated,
                                   session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                   ) ▶₁ #i ) )
        case KEMTLS_MUTUAL_simulated
        MIRRORED
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( RealTranscript( transcript_real, session_keys_real,
                                 public_keys
                 ) ▶₀ #i ) )
      case KEMTLS_MUTUAL_real
      step( solve( FakeTranscript( transcript_simulated,
                                   session_keys_simulated, <KEM_c_PK(~sk_P.1), KEM_s_PK(~sk_P)>
                   ) ▶₁ #i ) )
        case KEMTLS_MUTUAL_simulated
        MIRRORED
      qed
    qed
  qed
qed

end