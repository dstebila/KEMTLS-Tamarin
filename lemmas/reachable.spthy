dnl M_LEMMA_REACHABLE
dnl arguments:
dnl $1: protocol mode (KEMTLS_MUTUAL, KEMTLS_SAUTH)
dnl $2: stage number (1, 2, 3, 4, 5, 6)
dnl $3: does the client expect server authentication at this stage? (⊤, ⊥)
dnl $4: does the server expect server authentication at this stage? (⊤, ⊥)
dnl $5: what level of FS does the client expect at this stage?
dnl $6: what level of FS does the server expect at this stage?
define(<!M_LEMMA_REACHABLE!>,<!
lemma reachable_$1_stage$2_c$5_s$6:
  exists-trace
  "
    ∃ tid_c tid_s C S sid #t1 #t2 #t3 #t4 #t5 #t6 #t7 #t8 #t9 #t10 #t11 #t12 #t13 #t14 #t15 #t16
    .
    not(tid_c = tid_s)                    // distinct threads
    ∧ ProtocolMode(tid_c, '$1') @ #t1     // client is running in protocol mode $1
    ∧ ProtocolMode(tid_s, '$1') @ #t2     // server is running in protocol mode $1
    ∧ Owner(tid_c, C) @ #t3               // the owner of the client thread
    ∧ Owner(tid_s, S) @ #t4               // the owner of the server thread
    ∧ Peer(tid_c, S) @ #t5                // the client has the right peer
    ∧ Peer(tid_s, C) @ #t6                // the server has the right peer
    ∧ (                                   // either
      (¬$3 ∧ (S = 'anonymous'))           // the client does not expect authentication, so the server is anonymous
      ∨                                   // or
      ($3 ∧ (¬(S = 'anonymous')))         // the client does expect authentication, so the server is not anonymous
    )
    ∧ (                                   // either
      (¬$4 ∧ (C = 'anonymous'))           // the server does not expect authentication, so the client is anonymous
      ∨                                   // or
      ($4 ∧ (¬(C = 'anonymous')))         // the server does expect authentication, so the client is not anonymous
    )
    ∧ Role(tid_c, 'client') @ #t7         // the client has the right role
    ∧ Role(tid_s, 'server') @ #t8         // the server has the right role
    ∧ Accept(tid_c, '$2') @ #t9           // the client accepted in stage $2
    ∧ Accept(tid_s, '$2') @ #t10          // the client accepted in stage $2
    ∧ CID(tid_c, '$2', sid) @ #t11        // the client and server have the same CID as the SID for stage $2
    ∧ CID(tid_s, '$2', sid) @ #t12
    ∧ SID(tid_c, '$2', sid) @ #t13
    ∧ SID(tid_s, '$2', sid) @ #t14
    ∧ (                                   // either
      ($3                                       // the client expects server authentication,
        ∧ (Ex #tt1 . Auth(tid_c, '$2') @ #tt1)) // so the client has accepted stage $2 as authenticated
      ∨                                   // or
      (¬$3                                       // the client does not expect server authentication,
        ∧ ¬(Ex #tt1 . Auth(tid_c, '$2') @ #tt1)) // so the client has never accepted stage $2 as authenticated
    )
    ∧ (                                   // either
      ($4                                       // the server expects client authentication,
        ∧ (Ex #tt1 . Auth(tid_s, '$2') @ #tt1)) // so the server has accepted stage $2 as authenticated
      ∨                                   // or
      (¬$4                                       // the server does not expect client authentication,
        ∧ ¬(Ex #tt1 . Auth(tid_s, '$2') @ #tt1)) // so the server has never accepted stage $2 as authenticated
    )
    ∧ FS(tid_c, '$2', '$5') @ #t15        // the client has the right forward secrecy level in stage $2
    ∧ FS(tid_s, '$2', '$6') @ #t16        // the server has the right forward secrecy level in stage $2
  "
!>)

M_LEMMA_REACHABLE(KEMTLS_SAUTH, 1, ⊥, ⊥, wfs1, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 1, ⊤, ⊥, fs, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 2, ⊥, ⊥, wfs1, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 2, ⊤, ⊥, fs, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 3, ⊥, ⊥, wfs2, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 3, ⊤, ⊥, fs, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 4, ⊥, ⊥, wfs2, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 4, ⊤, ⊥, fs, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 5, ⊥, ⊥, wfs2, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 5, ⊤, ⊥, fs, wfs1)
M_LEMMA_REACHABLE(KEMTLS_SAUTH, 6, ⊤, ⊥, fs, wfs1)

M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 1, ⊥, ⊥, wfs1, wfs1)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 1, ⊤, ⊤, fs, fs)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 2, ⊥, ⊥, wfs1, wfs1)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 2, ⊤, ⊤, fs, fs)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 3, ⊥, ⊥, wfs2, wfs2)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 3, ⊤, ⊤, fs, fs)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 4, ⊥, ⊥, wfs2, wfs2)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 4, ⊤, ⊤, fs, fs)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 5, ⊥, ⊤, wfs2, fs)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 5, ⊤, ⊤, fs, fs)
M_LEMMA_REACHABLE(KEMTLS_MUTUAL, 6, ⊤, ⊤, fs, fs)
