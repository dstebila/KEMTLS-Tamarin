lemma sk_security_wfs1:
  "
    All tid_owner i cid_i sid_i sk_i
    #taccept #tcid #tsid #tsk
    .
    Accept(tid_owner, i) @ #taccept
    & CID(tid_owner, i, cid_i) @ #tcid
    & SID(tid_owner, i, sid_i) @ #tsid
    & SK(tid_owner, i, sk_i) @ #tsk
    // (1) the stage key was not revealed
    & not(Ex #t . RevealedSessionKey(tid_owner, i) @ #t)
    // (2) the stage key of the partner session at stage i, if the partner exists, 
    // has not been revealed
    & not(
      Ex tid_partner #tt1 #tt2 .
      not(tid_owner = tid_partner)
      & SID(tid_partner, i, sid_i) @ #tt1
      & RevealedSessionKey(tid_partner, i) @ #tt2
    )
    // (3) there exists j ≥ i s.t. Pi.FS_{i,j} = wfs1, Pi.status_j = accepted, 
    // and there exists a contributive partner at stage i
    & (
      Ex j #tfs #tacceptj .
      FS(tid_owner, i, j, 'wfs1') @ #tfs
      & Accept(tid_owner, j) @ #tacceptj
      & (
        Ex tid_peer #tacceptjpeer #tcidpeer .
        not(tid_owner = tid_peer)
        & Accept(tid_peer, j) @ #tacceptjpeer
        & CID(tid_peer, i, cid_i) @ #tcidpeer
      )
    )
    ==>
    not(Ex #t . KU(sk_i) @ #t)
  "

lemma sk_security_wfs2:
  "
    All tid_owner pid i cid_i sid_i sk_i
    #taccept #tpid #tcid #tsid #tsk
    .
    Accept(tid_owner, i) @ #taccept
    & Peer(tid_owner, pid) @ #tpid
    & CID(tid_owner, i, cid_i) @ #tcid
    & SID(tid_owner, i, sid_i) @ #tsid
    & SK(tid_owner, i, sk_i) @ #tsk
    // (1) the stage key was not revealed
    & not(Ex #t . RevealedSessionKey(tid_owner, i) @ #t)
    // (2) the stage key of the partner session at stage i, if the partner exists,
    // has not been revealed
    & not(Ex tid_partner #tt1 #tt2 .
      not(tid_owner = tid_partner)
      & SID(tid_partner, i, sid_i) @ #tt1
      & RevealedSessionKey(tid_partner, i) @ #tt2
    )
    // (3) there exists j ≥ i s.t. Pi.FS_{i,j} = wfs2, Pi.status_j = accepted, 
    // and either
    // (a) there exists a contributive partner at stage i, or
    // (b) Corrupt(Pi.pid) was never called
    & (
      Ex j #tfs #tacceptj .
      FS(tid_owner, i, j, 'wfs2') @ #tfs
      & Accept(tid_owner, j) @ #tacceptj
      & (
          (
            Ex tid_peer #tacceptjpeer #tcidpeer .
            not(tid_owner = tid_peer)
            & Accept(tid_peer, j) @ #tacceptjpeer
            & CID(tid_peer, i, cid_i) @ #tcidpeer
          ) | (
            not(Ex keytype #tcorrupt . CorruptedLTK(pid, keytype) @ #tcorrupt)
          )
        )
      )
    ==>
    not(Ex #t . KU(sk_i) @ #t)
  "

lemma sk_security_fs:
  "
    All tid_owner pid i cid_i sid_i sk_i
    #taccept #tpid #tcid #tsid #tsk
    .
    Accept(tid_owner, i) @ #taccept
    & Peer(tid_owner, pid) @ #tpid
    & CID(tid_owner, i, cid_i) @ #tcid
    & SID(tid_owner, i, sid_i) @ #tsid
    & SK(tid_owner, i, sk_i) @ #tsk
    // (1) the stage key was not revealed
    & not(Ex #t . RevealedSessionKey(tid_owner, i) @ #t)
    // (2) the stage key of the partner session at stage i, if the partner exists,
    // has not been revealed
    & not(Ex tid_partner #tt1 #tt2 .
      not(tid_owner = tid_partner)
      & SID(tid_partner, i, sid_i) @ #tt1
      & RevealedSessionKey(tid_partner, i) @ #tt2
    )
    // (3) there exists j ≥ i s.t. Pi.FS_{i,j} = wfs2, Pi.status_j = accepted, 
    // and either
    // (a) there exists a contributive partner at stage i, or
    // (b) Corrupt(Pi.pid) was not called before stage j of session Pi accepted
    & (
      Ex j #tfs #tacceptj .
      FS(tid_owner, i, j, 'fs') @ #tfs
      & Accept(tid_owner, j) @ #tacceptj
      & (
          (
            Ex tid_peer #tacceptjpeer #tcidpeer .
            not(tid_owner = tid_peer)
            & Accept(tid_peer, j) @ #tacceptjpeer
            & CID(tid_peer, i, cid_i) @ #tcidpeer
          ) | (
            not(
              Ex keytype #tcorrupt . 
              CorruptedLTK(pid, keytype) @ #tcorrupt
              & #tcorrupt < #tacceptj
            )
          )
        )
      )
    ==>
    not(Ex #t . KU(sk_i) @ #t)
  "
