rule KEMTLS_PDK_MUTUAL_ClientAction1:
  let
    SERVER_CERTIFICATE = <'ServerCertificate', pk_S>
    pk_e = KEM_e_PK(~sk_e)
    ss_S = KEM_s_Encaps_ss(pk_S, ~coins_S)
    ct_S = KEM_s_Encaps_ct(pk_S, ~coins_S)
    CLIENT_HELLO = <'ClientHello', pk_e, ~r_c, ct_S, 'pdk_mode', H(pk_S)>
    ES = HKDFExtract('0', ss_S)
    ETS = HKDFExpand(ES, 'early_data', <CLIENT_HELLO>)
    cid_1 = <'ETS', M_KEMTLS_PDK_MUTUAL_STAGE1_TRANSCRIPT>
    sid_1 = <'ETS', M_KEMTLS_PDK_MUTUAL_STAGE1_TRANSCRIPT>
    CLIENT_CERTIFICATE = <'ClientCertificate', pk_C>
    dES = HKDFExpand(ES, 'derived', '0')
  in
  [
    !Ltk($C, pk_C, sk_C, 'KEM_c'),
    !Pk($S, pk_S, 'KEM_s'),
    Fr(~tid),
    Fr(~sk_e),
    Fr(~coins_S),
    Fr(~r_c)
  ]
  --[
    Role(~tid, 'client'),
    ProtocolMode(~tid, '1', '1', 'KEMTLS_PDK_SAUTH_OR_MUTUAL'),
    CID(~tid, '1', cid_1), SID(~tid, '1', sid_1),
    Accept(~tid, '1'),
    Owner(~tid, $C),
    Peer(~tid, $S),
    SK(~tid, '1', ETS),
    FS(~tid, '1', '1', 'nofs'),
    Replayable(~tid, '1')
  ]->
  [
    Out(~tid),
    Out(<CLIENT_HELLO, CLIENT_CERTIFICATE>),
    State(~tid, 'KEMTLS_PDK_MUTUAL', 'ClientAction1', <~sk_e, dES>, <M_KEMTLS_PDK_MUTUAL_STAGE1_TRANSCRIPT, CLIENT_CERTIFICATE>),
    !SessionKey(~tid, '1', ETS)
  ]

rule KEMTLS_PDK_MUTUAL_ClientAction2_part1:
  let
    SERVER_CERTIFICATE = <'ServerCertificate', pk_S>
    CLIENT_HELLO = <'ClientHello', pk_e, r_c, ct_S, 'pdk_mode', H(pk_S)>
    CLIENT_CERTIFICATE = <'ClientCertificate', pk_C>
    SERVER_HELLO = <'ServerHello', ct_e, r_s>
    ss_e = KEM_e_Decaps(ct_e, sk_e)
    HS = HKDFExtract(dES, ss_e)
    CHTS = HKDFExpand(HS, 'c_hs_traffic', <CLIENT_HELLO, CLIENT_CERTIFICATE, SERVER_HELLO>)
    cid_2 = <'CHTS', M_KEMTLS_PDK_MUTUAL_STAGE2_TRANSCRIPT>
    sid_2 = <'CHTS', M_KEMTLS_PDK_MUTUAL_STAGE2_TRANSCRIPT>
    SHTS = HKDFExpand(HS, 's_hs_traffic', <CLIENT_HELLO, CLIENT_CERTIFICATE, SERVER_HELLO>)
    cid_3 = <'SHTS', M_KEMTLS_PDK_MUTUAL_STAGE3_TRANSCRIPT>
    sid_3 = <'SHTS', M_KEMTLS_PDK_MUTUAL_STAGE3_TRANSCRIPT>
    dHS = HKDFExpand(HS, 'derived', '0')
    SERVER_KEM_CIPHERTEXT = <'ServerKEMCiphertext', ct_C>
    ss_C = KEM_c_Decaps(ct_C, sk_C)
    MS = HKDFExtract(dHS, ss_C)
  in
  [
    !Ltk($C, pk_C, sk_C, 'KEM_c'),
    !Pk($S, pk_S, 'KEM_s'),
    State(tid, 'KEMTLS_PDK_MUTUAL', 'ClientAction1', <sk_e, dES>, <M_KEMTLS_PDK_MUTUAL_STAGE1_TRANSCRIPT, CLIENT_CERTIFICATE>),
    In(<SERVER_HELLO, SERVER_KEM_CIPHERTEXT>)
  ]
  --[
    ProtocolMode(tid, '1', '2', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '1', '3', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '2', '2', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '2', '3', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '3', '3', 'KEMTLS_PDK_MUTUAL'),
    CID(tid, '2', cid_2), SID(tid, '2', sid_2),
    CID(tid, '3', cid_3), SID(tid, '3', sid_3),
    Accept(tid, '2'),
    Accept(tid, '3'),
    FS(tid, '1', '2', 'nofs'), FS(tid, '1', '3', 'nofs'), 
    SK(tid, '2', CHTS),
    FS(tid, '2', '2', 'wfs2'), FS(tid, '2', '3', 'wfs2'),
    SK(tid, '3', SHTS),
    FS(tid, '3', '3', 'wfs2')
  ]->
  [
    State(tid, 'KEMTLS_PDK_MUTUAL', 'ClientAction2_part1', <MS>, <M_KEMTLS_PDK_MUTUAL_STAGE3_TRANSCRIPT, SERVER_KEM_CIPHERTEXT>),
    !SessionKey(tid, '2', CHTS),
    !SessionKey(tid, '3', SHTS)
  ]

rule KEMTLS_PDK_MUTUAL_ClientAction2_part2:
  let
    SERVER_CERTIFICATE = <'ServerCertificate', pk_S>
    CLIENT_HELLO = <'ClientHello', pk_e, r_c, ct_S, 'pdk_mode', H(pk_S)>
    CLIENT_CERTIFICATE = <'ClientCertificate', pk_C>
    SERVER_HELLO = <'ServerHello', ct_e, r_s>
    SERVER_KEM_CIPHERTEXT = <'ServerKEMCiphertext', ct_C>
    fk_c = HKDFExpand(MS, 'c_finished', '0')
    fk_s = HKDFExpand(MS, 's_finished', '0')
    SF = HMAC(fk_s, <CLIENT_HELLO, CLIENT_CERTIFICATE, SERVER_HELLO, SERVER_KEM_CIPHERTEXT>)
    SERVER_FINISHED = <'ServerFinished', SF>
    SATS = HKDFExpand(MS, 's_ap_traffic', <CLIENT_HELLO, CLIENT_CERTIFICATE, SERVER_HELLO, SERVER_KEM_CIPHERTEXT, SERVER_FINISHED>)
    cid_4 = <'SATS', M_KEMTLS_PDK_MUTUAL_STAGE4_TRANSCRIPT>
    sid_4 = <'SATS', M_KEMTLS_PDK_MUTUAL_STAGE4_TRANSCRIPT>
    CF = HMAC(fk_c, <CLIENT_HELLO, CLIENT_CERTIFICATE, SERVER_HELLO, SERVER_KEM_CIPHERTEXT, SERVER_FINISHED>)
    CLIENT_FINISHED = <'ClientFinished', CF>
    CATS = HKDFExpand(MS, 'c_ap_traffic', <CLIENT_HELLO, CLIENT_CERTIFICATE, SERVER_HELLO, SERVER_KEM_CIPHERTEXT, SERVER_FINISHED, CLIENT_FINISHED>)
    cid_5 = <'CATS', M_KEMTLS_PDK_MUTUAL_STAGE5_TRANSCRIPT>
    sid_5 = <'CATS', M_KEMTLS_PDK_MUTUAL_STAGE5_TRANSCRIPT>
  in
  [
    State(tid, 'KEMTLS_PDK_MUTUAL', 'ClientAction2_part1', <MS>, <M_KEMTLS_PDK_MUTUAL_STAGE3_TRANSCRIPT, SERVER_KEM_CIPHERTEXT>),
    In(<SERVER_FINISHED>)
  ]
  --[
    ProtocolMode(tid, '1', '4', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '1', '5', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '2', '4', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '2', '5', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '3', '4', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '3', '5', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '4', '4', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '4', '5', 'KEMTLS_PDK_MUTUAL'),
    ProtocolMode(tid, '5', '5', 'KEMTLS_PDK_MUTUAL'),
    CID(tid, '4', cid_4), SID(tid, '4', sid_4),
    CID(tid, '5', cid_5), SID(tid, '5', sid_5),
    Accept(tid, '4'),
    Accept(tid, '5'),
    FS(tid, '1', '4', 'nofs'), FS(tid, '1', '5', 'nofs'), 
    FS(tid, '2', '4', 'fs'), FS(tid, '2', '5', 'fs'),
    FS(tid, '3', '4', 'fs'), FS(tid, '3', '5', 'fs'),
    FS(tid, '4', '4', 'fs'), FS(tid, '4', '5', 'fs'),
    FS(tid, '5', '5', 'fs'),
    SK(tid, '4', SATS),
    SK(tid, '5', CATS),
    Auth(tid, '1', '4'),
    Auth(tid, '2', '4'),
    Auth(tid, '3', '4'),
    Auth(tid, '4', '4')
  ]->
  [
    Out(<CLIENT_FINISHED>),
    !SessionKey(tid, '4', SATS),
    !SessionKey(tid, '5', CATS)
  ]
